<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miloer の 闲言碎语</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-03T05:25:46.364Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Miloer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongoDB初探 基本命令</title>
    <link href="http://yoursite.com/2017/08/03/mongoDB%E5%88%9D%E6%8E%A2-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/08/03/mongoDB初探-基本命令/</id>
    <published>2017-08-03T05:22:27.000Z</published>
    <updated>2017-08-03T05:25:46.364Z</updated>
    
    <content type="html"><![CDATA[<p><strong>新建/选择数据库</strong></p>
<blockquote>
<p>use test</p>
</blockquote>
<p><strong>显示数据库列表</strong></p>
<blockquote>
<p>show dbs</p>
</blockquote>
<p><strong>创建表</strong></p>
<blockquote>
<p>db.createCollection(“test”)</p>
</blockquote>
<p><strong>展示表</strong></p>
<blockquote>
<p>show collections</p>
</blockquote>
<p><strong>删除当前数据库</strong></p>
<blockquote>
<p>db.dropDatabase()</p>
</blockquote>
<p><strong>获取当前环境的数据库名</strong></p>
<blockquote>
<p>db.getName()</p>
</blockquote>
<p><strong>数据库命令帮助</strong></p>
<blockquote>
<p>db.help()</p>
</blockquote>
<p><strong>删除集合</strong></p>
<blockquote>
<p>db.name.remove()</p>
</blockquote>
<p><strong>集合命令帮助</strong></p>
<blockquote>
<p>db.name.help()</p>
</blockquote>
<h4 id="文档操作查询"><a href="#文档操作查询" class="headerlink" title="文档操作查询"></a>文档操作查询</h4><p><strong>查询所有</strong></p>
<blockquote>
<p>db.name.find()</p>
</blockquote>
<p><strong>查询第一条记录</strong></p>
<blockquote>
<p>db.name.findOne()</p>
</blockquote>
<p><strong>按条件查找</strong></p>
<blockquote>
<p>db.name.find({“name”:”miloer”})</p>
</blockquote>
<p><strong>指定返回值查询</strong></p>
<blockquote>
<p>db.name.find({},{“name”:1})</p>
</blockquote>
<p>{}代表所有<br>name代表所查字段<br>1：代表所查询的数据中包含name属性<br>0：与1相反</p>
<p><strong> $ gt  查询name表中年龄大于20的数据</strong></p>
<blockquote>
<p>db.name.find({“age”:{$gt:20}})</p>
</blockquote>
<p><strong> $ gte  查询name表中年龄大于等于20的数据</strong></p>
<blockquote>
<p>db.name.find({“age”:{$gte:20}})</p>
</blockquote>
<p><strong> $ lt  查询name表中年龄小于20的数据</strong></p>
<blockquote>
<p>db.name.find({“age”:{$lt:20}})</p>
</blockquote>
<p><strong> $ lte  查询name表中年龄小于等于20的数据</strong></p>
<blockquote>
<p>db.name.find({“age”:{$lte:20}})</p>
</blockquote>
<p><strong>$ or 查询name表中满足年龄等于20 或者21的数据</strong></p>
<blockquote>
<p>db.name.find({$or:[{age:20},{age:21}]})</p>
</blockquote>
<p>注意插入的age对象必须为number类型。我第一次插入的是字符串，就没查出来（滑稽）.</p>
<h4 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h4><p><strong>包含查询</strong><br>查询表中name属性包含test的文档</p>
<blockquote>
<p>db.name.find({name:/test/})</p>
</blockquote>
<p><strong>包含头查询</strong><br>查询表中name属性开头包含’test’的文档</p>
<blockquote>
<p>db.name.find({name:/^test/})</p>
</blockquote>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p><strong>升序</strong></p>
<blockquote>
<p>db.name.find().sort({age:1})</p>
</blockquote>
<p><strong>降序</strong></p>
<blockquote>
<p>db.name.find().sort({age:-1})</p>
</blockquote>
<h4 id="限定查询条数"><a href="#限定查询条数" class="headerlink" title="限定查询条数"></a>限定查询条数</h4><p><strong>skip</strong></p>
<p>限定起始查询条（从第五条开始查询）</p>
<blockquote>
<p>db.name.find().skip(5)</p>
</blockquote>
<p><strong>limit</strong></p>
<p>限定查询5条（查询至第五条为止）</p>
<blockquote>
<p>db.name.find().limit(5);</p>
</blockquote>
<h4 id="文档操作-增、删、改"><a href="#文档操作-增、删、改" class="headerlink" title="文档操作 增、删、改"></a>文档操作 增、删、改</h4><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><h6 id="insert-插入文档"><a href="#insert-插入文档" class="headerlink" title="insert 插入文档"></a>insert 插入文档</h6><p><strong>单条插入</strong></p>
<blockquote>
<p>db.name.insert({username:’test’})</p>
</blockquote>
<p><strong>批量插入</strong></p>
<blockquote>
<p>var query = [{‘username’:1},{‘username’:2}];<br>db.name.insert(query)</p>
</blockquote>
<p><strong>池插入</strong></p>
<blockquote>
<p>var query = [{‘username’:1},{‘username’:2}];<br>db.name.bathInsert(query);</p>
</blockquote>
<h6 id="save"><a href="#save" class="headerlink" title="save"></a>save</h6><p>save 与insert类似，insert插入时如果存在主键会报错，save插入如果存在会覆盖。效率比insert要低。</p>
<h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><p><strong>删除指定文档</strong></p>
<blockquote>
<p>db.name.remove({‘userName’:1})</p>
</blockquote>
<p><strong>删除指定文档中的第一条</strong></p>
<blockquote>
<p>db.name.remove({‘userName’:1},{justOne:true})</p>
</blockquote>
<p><strong>删除所有文档</strong></p>
<blockquote>
<p>db.name.remove({})</p>
</blockquote>
<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p><strong>$set</strong></p>
<blockquote>
<p>db.name.update({‘userName’:1},{$set:{‘userName’:2}})</p>
</blockquote>
<p><strong>$inc</strong><br>自增 ,agree+=10</p>
<blockquote>
<p>db.name.update({userName:’test’},{$inc:{agree:10}})</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;新建/选择数据库&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;use test&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;显示数据库列表&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;show dbs&lt;/p&gt;
&lt;/b
    
    </summary>
    
    
      <category term="mongoDB" scheme="http://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>webpack在项目里的应用（笔记）</title>
    <link href="http://yoursite.com/2017/06/28/webpack%E5%9C%A8%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2017/06/28/webpack在项目里的应用（笔记）/</id>
    <published>2017-06-28T03:52:56.000Z</published>
    <updated>2017-07-20T01:42:47.913Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3354589-aeaa8cbe30addeae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alt text"></p>
<a id="more"></a><!--more-->
<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>以前用webpack配着Vue全家桶做过单页应用。这次准备在多页应用里使用webpack打包程序。</p>
<h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>可能是刚刚踩过坑就过来用了，能应用的知识点不是很多，凭着一腔热血就滚过来想在项目里试试。</p>
<p>昨天尝试着在项目里把首页给打包了，结果没想到异常的顺利。</p>
<p>打包过程是分着踩坑式打的，原来的主页文件大约加载了公共JS 1个，加密JS2个，还有一个jQuery。</p>
<p>jQuery 版本支持模块的导出，很方便弄，但是加密的2个JS连npm都不支持，别提支持模块导入导出了，怎么办？<br>一开始 ，我只把我写的JS 和公共类以及jQuery打包，加密的JS还是暴露在外面，试着运行一下，可以运行，但是还是暴露在外面，还用webpack 有什么用？<br>感觉不伦不类的。</p>
<p>接着，看了看2个加密的JS代码，折腾了半小时，把对应使用模块导出了，试着运行，可以运行。</p>
<p>今天呢？尝试着在打包一个页面，可是加载了更多的JS，还像昨天一样，我把能打包的先打包，不能的JS暴露在页面全局。但是令我奇怪的事情发生了，打包的文件里，用不了全局的JS插件。<br>但是在我昨天的印象里，暴露在全局的JS，打包后的JS应该是能访问里面的。接着，我把用到的外面的JS文件放到外面，能正常访问了。</p>
<h5 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h5><p>今天有时间会尝试着把代码分割开来，理解问题出现的原因，寻找解决问题的方法，然后尝试着把全局的JS也打包进来。</p>
<p>昨天我看帖子有一句话，webpack更适合做单页页面应用，多页应用更适合用glup来做，是这样吗？</p>
<h5 id="最后放一张webpack的整体流程图"><a href="#最后放一张webpack的整体流程图" class="headerlink" title="最后放一张webpack的整体流程图"></a>最后放一张webpack的整体流程图</h5><p><img src="https://img.alicdn.com/tps/TB1GVGFNXXXXXaTapXXXXXXXXXX-4436-4244.jpg" alt="alt text"></p>
<h5 id="6-29"><a href="#6-29" class="headerlink" title="6.29"></a>6.29</h5><p>打包完文件是局部的，html代码在使用时 会报$ undefined</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">test.html</div><div class="line">&lt;script src=&quot;./dist/js/test.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    $(function() &#123;</div><div class="line">        $(&quot;#fdas&quot;).text(&quot;22&quot;);</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>test文件里import jQuery，在test.html 在使用jQuery时，就报错了。</p>
<h6 id="6-29-下午"><a href="#6-29-下午" class="headerlink" title="6.29 下午"></a>6.29 下午</h6><p>理解的有一些偏差，[手动滑稽]。<br>感觉webpack比自己想象的强大的多。</p>
<p>我模糊的以为引用第三方的JS 给需要export这种模块，其实并不需要，昨天提到需要引入2个JS插件，今天require()引入进来就万事大吉了。<br>这样好像就用不了代码分割的功能了，我其实一直把这个放在心头来着。其实想想像这种第三的库，又不会经常改动，何必要跟逻辑代码混在一起呢？</p>
<p>今天查了查资料，对这种常引用的第三方库，用CommonsChunkPlugin打包公共代码，打包的JS文件，然后在把这个静态资源做缓存 ，它有一个minChunks属性，我觉得很有趣，这个是判断公共代码的判断标准，某个js模块被多少个chunk加载了才算是公共代码。</p>
<h5 id="6-30"><a href="#6-30" class="headerlink" title="6.30"></a>6.30</h5><p>六月的最后一天，刚刚好也是星期五。</p>
<p>以前用vue 脚手架，写过一个应用查询的小程序，着实体验了一把单页应用的丝滑柔顺[笑哭]。 记得在页面都是动态引入CSS资源来着，不过那个是单页应用，整体页面引入一个，生成webpack 把JS CSS 一些文件混在一起。</p>
<p>在多页面应用,我尝试把第三方的css文件，JS库和业务逻辑代码分开打包。</p>
<p>common.js // 三方 这些不动的</p>
<p>[name].js //每个页面固定的入口文件</p>
<p>还有一些单个页面定制的css文件，现在想的是把这个也混放在业务逻辑代码包里。</p>
<p>不知道这样合不合理？还有把这个打包除了对缓存，以及减少http请求有优势以外还有其他的优势吗？</p>
<h5 id="使用extract-text-webpack-plugin"><a href="#使用extract-text-webpack-plugin" class="headerlink" title="使用extract-text-webpack-plugin"></a>使用extract-text-webpack-plugin</h5><p>目前的状态是，html代码里 有一些文件，并不是配合webpack动态载入的模板文件。打包后的CSS样式就这样加载到了页面的头部，但是当用户启动页面时，已经加载html文件了，也就是说，第一眼看到的html文件没有样式的。</p>
<p>使用extract-text-webpack-plugin插件可以独立打包css文件</p>
<p>安装<br>npm install extract-text-webpack-plugin –save-dev </p>
<p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> rules: [&#123;</div><div class="line">           test: /\.css$/,</div><div class="line">           use: ExtractTextPlugin.extract(&#123;</div><div class="line">               fallback: &quot;style-loader&quot;,</div><div class="line">               use: &quot;css-loader&quot;</div><div class="line">           &#125;)</div><div class="line">   &#125;]</div><div class="line">plugins: [</div><div class="line">       new ExtractTextPlugin(&#123; filename: &apos;css/[name].css&apos;, allChunks: true &#125;)</div><div class="line">   ]</div></pre></td></tr></table></figure></p>
<p>allChunks 的作用是可以把加载的多个CSS文件合并为一个css文件。</p>
<h5 id="阶段想法"><a href="#阶段想法" class="headerlink" title="阶段想法"></a>阶段想法</h5><p>就目前而言，感觉就像是把法拉利的材料拼接成了一个金杯。<br>从页面访问角度来讲，初见成效，代码维护也相对更好维护。<br>但是里面使用的plugins，loaders，并没有做到深层次的挖掘，这是下一阶段需要做的学习内容。</p>
<h5 id="7-4-url-loader"><a href="#7-4-url-loader" class="headerlink" title="7.4  url-loader"></a>7.4  url-loader</h5><p>使用了url-loader，把对应小的图片转为base64的形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import img from &apos;../../img/icon_to.png&apos;;</div><div class="line"></div><div class="line">对应的Loader</div><div class="line">&#123;</div><div class="line">        test: /\.(png|jpg|gif)$/,</div><div class="line">         use: [&#123;</div><div class="line">             loader: &apos;url-loader&apos;,</div><div class="line">             options: &#123;</div><div class="line">                 limit: 8192</div><div class="line">             &#125;</div><div class="line">         &#125;]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这里有一篇单图，雪碧图，base64图片的对比分析。大致看了一下，不明觉厉，准备详细看看<a href="http://www.jianshu.com/p/486fa240a3a7" target="_blank" rel="external">前端图片引入方式神演算.
</a></p>
<p>相比传统页面，我测试了目前的页面状态，使用webpack动态引入图片，相比载入的时候更耗时间。</p>
<p>老实说，看的越多，越感觉一团乱遭，刚刚尝试使用了require.ensure()拆分代码，按需去加载模块，流程明白为什么去这么做，但是这个demo效果没有到达期望的效果，页面载入时间比以前更长了。</p>
<h5 id="压缩JS-CSS代码"><a href="#压缩JS-CSS代码" class="headerlink" title="压缩JS CSS代码"></a>压缩JS CSS代码</h5><p>用ExtractTextPlugin把所有的文件打包为一个CSS文件，然后压缩.但是每次压缩后页面有些样式就挂了[滑稽].目前还没找到原因。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//压缩css配置</div><div class="line">&#123;</div><div class="line">    test: /\.css$/,</div><div class="line">    use: ExtractTextPlugin.extract(&#123;</div><div class="line">        fallback: &quot;style-loader&quot;,</div><div class="line">        use: [&#123;</div><div class="line">            loader: &apos;css-loader&apos;,</div><div class="line">            options: &#123;</div><div class="line">                minimize: true &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;]</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>压缩JS代码，webpack 已经内嵌了uglifyJS无需额外引用插件，但是好像对es6代码压缩不了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.UglifyJsPlugin(&#123; </div><div class="line">		compress: &#123;</div><div class="line">		 warnings: false</div><div class="line">		&#125;,</div><div class="line">		except: [&apos;$&apos;, &apos;jQuery&apos;, &apos;require&apos;, &apos;exports&apos;, &apos;import&apos;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>except :排除关键字</p>
<p>还有一种压缩的方法，效率蛮高的。我这个250k 转换完 节省了90多k。<br>使用 <strong>babili-webpack-plugin</strong></p>
<p>在配置里使用非常简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const BabiliPlugin = require(&apos;babili-webpack-plugin&apos;);</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">        new ExtractTextPlugin(&#123; filename: &apos;css/[name].css&apos;, allChunks: true &#125;),</div><div class="line">        new purify(&#123;</div><div class="line">            basePath: __dirname,</div><div class="line">            paths: [</div><div class="line">                &quot;webMoudle/*.html&quot;,</div><div class="line">                &quot;webMoudle/*.jsp&quot;,</div><div class="line">            ]</div><div class="line">        &#125;),</div><div class="line">        new BabiliPlugin()</div><div class="line"> ]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3354589-aeaa8cbe30addeae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="js webpack 笔记" scheme="http://yoursite.com/tags/js-webpack-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>倾力总结40条常见的移动端Web页面问题解决方案</title>
    <link href="http://yoursite.com/2017/06/23/%E5%80%BE%E5%8A%9B%E6%80%BB%E7%BB%9340%E6%9D%A1%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%AB%AFWeb%E9%A1%B5%E9%9D%A2%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2017/06/23/倾力总结40条常见的移动端Web页面问题解决方案/</id>
    <published>2017-06-23T01:08:34.000Z</published>
    <updated>2017-06-23T02:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2542851-d52db9d6257eeb7e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alt text"></p>
<p>感觉好久没写博客了,可能自己都觉得太冷清,所以才搬来一篇文章..(手动滑稽)</p>
<p>看完感觉作者君好好的安利了一下fastclick.js</p>
<p>不过移动端的点击事件确实令人蛋疼，再比如说IOS下div,span非可点击元素事件失败,关于这点我作为一个小拓展放到最后来写。<br><a id="more"></a><!--more--></p>
<h4 id="1、安卓浏览器看背景图片，有些设备会模糊。"><a href="#1、安卓浏览器看背景图片，有些设备会模糊。" class="headerlink" title="1、安卓浏览器看背景图片，有些设备会模糊。"></a>1、安卓浏览器看背景图片，有些设备会模糊。</h4><p>用同等比例的图片在PC机上很清楚，但是手机上很模糊，原因是什么呢？</p>
<p>经过研究，是devicePixelRatio作怪，因为手机分辨率太小，如果按照分辨率来显示网页，这样字会非常小，所以苹果当初就把iPhone 4的960640分辨率，在网页里只显示了480320，这样devicePixelRatio＝2。现在android比较乱，有1.5的，有2的也有3的。</p>
<p>想让图片在手机里显示更为清晰，必须使用2x的背景图来代替img标签（一般情况都是用2倍）。例如一个div的宽高是100100，背景图必须得200200，然后background-size:contain;，这样显示出来的图片就比较清晰了。</p>
<p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">background:url(../images/icon/all.png) no-repeat center center;</div><div class="line">-webkit-background-size:50px 50px;</div><div class="line">background-size: 50px 50px;</div><div class="line">display:inline-block; </div><div class="line">width:100%; </div><div class="line">height:50px;</div></pre></td></tr></table></figure></p>
<p>或者指定<code> background-size:contain;</code>都可以，大家试试！</p>
<h4 id="2、图片加载"><a href="#2、图片加载" class="headerlink" title="2、图片加载"></a>2、图片加载</h4><p>若您遇到图片加载很慢的问题，对这种情况，手机开发一般用canvas方法加载：</p>
<p>具体的canvas API 参见：<a href="http://javascript.ruanyifeng.com/htmlapi/canvas.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/htmlapi/canvas.html</a></p>
<p>下面举例说明一个canvas的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;canvas&gt;&lt;/canvas&gt;&lt;/li&gt; </div><div class="line"></div><div class="line">js动态加载图片和li 总共举例17张图片！</div><div class="line"></div><div class="line">var total=17;</div><div class="line">var zWin=$(window);</div><div class="line">var render=function()&#123;</div><div class="line">  var padding=2;</div><div class="line">  var winWidth=zWin.width();</div><div class="line">  var picWidth=Math.floor((winWidth-padding*3)/4);</div><div class="line">  var tmpl =&apos;&apos;;</div><div class="line">  for (var i=1;i&lt;=totla;i++)&#123;</div><div class="line">  var p=padding;</div><div class="line">  var imgSrc=&apos;img/&apos;+i+&apos;.jpg&apos;;</div><div class="line">  if(i%4==1)&#123;</div><div class="line">   p=0;</div><div class="line">  &#125;</div><div class="line">  tmpl +=&apos;&lt;li style=&quot;width:&apos;+picWidth+&apos;px;height:&apos;+picWidth+&apos;px;padding-left:&apos;+p+&apos;px;padding-top:&apos;+padding+&apos;px;&quot;&gt;&lt;canvas id=&quot;cvs_&apos;+i+&apos;&quot;&gt;&lt;/canvas&gt;&lt;/li&gt;&apos;;</div><div class="line">  var imageObj = new Image();</div><div class="line">  imageObj.index = i;</div><div class="line">  imageObj.onload = function()&#123;</div><div class="line">    var cvs =$(&apos;#cvs_&apos;+this.index)[0].getContext(&apos;2d&apos;);</div><div class="line">    cvs.width = this.width;</div><div class="line">    cvs.height=this.height;</div><div class="line">    cvs.drawImage(this,0,0);</div><div class="line">  &#125;</div><div class="line">  imageObj.src=imgSrc;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line">render();</div></pre></td></tr></table></figure></p>
<h4 id="3、假如手机网站不用兼容IE浏览器，一般我们会使用zeptojs。"><a href="#3、假如手机网站不用兼容IE浏览器，一般我们会使用zeptojs。" class="headerlink" title="3、假如手机网站不用兼容IE浏览器，一般我们会使用zeptojs。"></a>3、假如手机网站不用兼容IE浏览器，一般我们会使用zeptojs。</h4><p>zeptojs内置Touch events方法，具体可以看<a href="http://zeptojs.com/#Touch" target="_blank" rel="external">http://zeptojs.com/#Touch</a> events</p>
<p>看了一下zeptio新版的API，已经支持IE10以上浏览器，对zeptojs可以选择使用！</p>
<h4 id="4、防止手机中网页放大和缩小。"><a href="#4、防止手机中网页放大和缩小。" class="headerlink" title="4、防止手机中网页放大和缩小。"></a>4、防止手机中网页放大和缩小。</h4><p>这点是最基本的，最为手机网站开发者来说应该都知道的，就是设置meta中的viewport</p>
<p>还有就是，有些手机网站我们看到如下声明：</p>
<p>&lt;!DOCTYPE html PUBLIC “-//WAPFORUM//DTD XHTML Mobile 1.0//EN” “<a href="http://www.wapforum.org/DTD/xhtml-mobile10.dtd&quot;&gt;" target="_blank" rel="external">http://www.wapforum.org/DTD/xhtml-mobile10.dtd&quot;&gt;</a></p>
<p>设置了DTD的方式是XHTML的写法，假如我们页面运用的是html5，可以不用设置DTD,直接声明&lt;!DOCTYPE html&gt;。</p>
<p>使用viewport使页面禁止缩放。 通常把user-scalable设置为0来关闭用户对页面视图缩放的行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=0&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>但是为了更好的兼容，我们会使用完整的viewport设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>当然，user-scalable=0,有的人也写成user-scalable=no，都可以的。</p>
<h4 id="5、apple-mobile-web-app-capable"><a href="#5、apple-mobile-web-app-capable" class="headerlink" title="5、apple-mobile-web-app-capable"></a>5、apple-mobile-web-app-capable</h4><p>apple-mobile-web-app-capable是设置Web应用是否以全屏模式运行。</p>
<p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>说明：<br>如果content设置为yes，Web应用会以全屏模式运行，反之，则不会。content的默认值是no，表示正常显示。你可以通过只读属性window.navigator.standalone来确定网页是否以全屏模式显示。</p>
<h4 id="6、format-detection"><a href="#6、format-detection" class="headerlink" title="6、format-detection"></a>6、format-detection</h4><p>format-detection 启动或禁用自动识别页面中的电话号码。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>说明：<br>默认情况下，设备会自动识别任何可能是电话号码的字符串。设置telephone=no可以禁用这项功能。</p>
<h4 id="7、html5调用安卓或者ios的拨号功能"><a href="#7、html5调用安卓或者ios的拨号功能" class="headerlink" title="7、html5调用安卓或者ios的拨号功能"></a>7、html5调用安卓或者ios的拨号功能</h4><p>html5提供了自动调用拨号的标签，只要在a标签的href中添加tel:就可以了。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;tel:10010&quot;&gt;10010&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h4 id="8、html5GPS定位功能"><a href="#8、html5GPS定位功能" class="headerlink" title="8、html5GPS定位功能"></a>8、html5GPS定位功能</h4><p>具体请看：<a href="http://www.w3school.com.cn/html5/html_5_geolocation.asp" target="_blank" rel="external">http://www.w3school.com.cn/html5/html_5_geolocation.asp</a></p>
<h4 id="9、上下拉动滚动条时卡顿、慢"><a href="#9、上下拉动滚动条时卡顿、慢" class="headerlink" title="9、上下拉动滚动条时卡顿、慢"></a>9、上下拉动滚动条时卡顿、慢</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  -webkit-overflow-scrolling: touch;</div><div class="line">  overflow-scrolling: touch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="10、禁止复制、选中文本"><a href="#10、禁止复制、选中文本" class="headerlink" title="10、禁止复制、选中文本"></a>10、禁止复制、选中文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Element &#123;</div><div class="line">  -webkit-user-select: none;</div><div class="line">  -moz-user-select: none;</div><div class="line">  -khtml-user-select: none;</div><div class="line">   user-select: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决移动设备可选中页面文本(视产品需要而定)</p>
<h4 id="11、长时间按住页面出现闪退"><a href="#11、长时间按住页面出现闪退" class="headerlink" title="11、长时间按住页面出现闪退"></a>11、长时间按住页面出现闪退</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">element &#123;</div><div class="line">  -webkit-touch-callout: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="12、iphone及ipad下输入框默认内阴影"><a href="#12、iphone及ipad下输入框默认内阴影" class="headerlink" title="12、iphone及ipad下输入框默认内阴影"></a>12、iphone及ipad下输入框默认内阴影</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Element&#123;</div><div class="line">  -webkit-appearance: none; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="13、ios和android下触摸元素时出现半透明灰色遮罩"><a href="#13、ios和android下触摸元素时出现半透明灰色遮罩" class="headerlink" title="13、ios和android下触摸元素时出现半透明灰色遮罩"></a>13、ios和android下触摸元素时出现半透明灰色遮罩</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Element &#123;</div><div class="line">  -webkit-tap-highlight-color:rgba(255,255,255,0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="14、active兼容处理-即-伪类-active-失效"><a href="#14、active兼容处理-即-伪类-active-失效" class="headerlink" title="14、active兼容处理 即 伪类 :active 失效"></a>14、active兼容处理 即 伪类 :active 失效</h4><p>方法一：body添加ontouchstart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;body ontouchstart=&quot;&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>方法二：js给 document 绑定 touchstart 或 touchend 事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">a &#123;</div><div class="line"> color: #000;</div><div class="line">&#125;</div><div class="line">a:active &#123;</div><div class="line"> color: #fff;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;a herf=foo &gt;bar&lt;/a&gt;</div><div class="line">&lt;script&gt;</div><div class="line"> document.addEventListener(&apos;touchstart&apos;,function()&#123;&#125;,false);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="15、动画定义3D启用硬件加速"><a href="#15、动画定义3D启用硬件加速" class="headerlink" title="15、动画定义3D启用硬件加速"></a>15、动画定义3D启用硬件加速</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Element &#123;</div><div class="line">  -webkit-transform:translate3d(0, 0, 0)</div><div class="line">  transform: translate3d(0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="16、Retina屏的1px边框"><a href="#16、Retina屏的1px边框" class="headerlink" title="16、Retina屏的1px边框"></a>16、Retina屏的1px边框</h4><p>具体请百度谷歌关键字，解决方案有很多</p>
<h4 id="17、webkit-mask-兼容处理"><a href="#17、webkit-mask-兼容处理" class="headerlink" title="17、webkit mask 兼容处理"></a>17、webkit mask 兼容处理</h4><p>某些低端手机不支持css3 mask，可以选择性的降级处理。<br>比如可以使用js判断来引用不同class：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if( &apos;WebkitMask&apos; in document.documentElement.style)&#123;</div><div class="line">  alert(&apos;支持mask&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">  alert(&apos;不支持mask&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="18、旋转屏幕时，字体大小调整的问题"><a href="#18、旋转屏幕时，字体大小调整的问题" class="headerlink" title="18、旋转屏幕时，字体大小调整的问题"></a>18、旋转屏幕时，字体大小调整的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;</div><div class="line">  -webkit-text-size-adjust:100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="19、transition闪屏"><a href="#19、transition闪屏" class="headerlink" title="19、transition闪屏"></a>19、transition闪屏</h4><p>/设置内嵌的元素在 3D 空间如何呈现：保留3D /<br>-webkit-transform-style: preserve-3d;<br>/ 设置进行转换的元素的背面在面对用户时是否可见：隐藏 /<br>-webkit-backface-visibility:hidden;</p>
<h4 id="20、圆角bug"><a href="#20、圆角bug" class="headerlink" title="20、圆角bug"></a>20、圆角bug</h4><p>某些Android手机圆角失效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-clip: padding-box;</div></pre></td></tr></table></figure></p>
<h4 id="21、顶部状态栏背景色"><a href="#21、顶部状态栏背景色" class="headerlink" title="21、顶部状态栏背景色"></a>21、顶部状态栏背景色</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</div></pre></td></tr></table></figure>
<p>说明：<br>除非你先使用apple-mobile-web-app-capable指定全屏模式，否则这个meta标签不会起任何作用。</p>
<p>如果content设置为default，则状态栏正常显示。如果设置为blank，则状态栏会有一个黑色的背景。如果设置为blank-translucent，则状态栏显示为黑色半透明。</p>
<p>如果设置为default或blank，则页面显示在状态栏的下方，即状态栏占据上方部分，页面占据下方部分，二者没有遮挡对方或被遮挡。</p>
<p>如果设置为blank-translucent，则页面会充满屏幕，其中页面顶部会被状态栏遮盖住（会覆盖页面20px高度，而iphone4和itouch4的Retina屏幕为40px）。</p>
<p>默认值是default。</p>
<h4 id="22、设置缓存"><a href="#22、设置缓存" class="headerlink" title="22、设置缓存"></a>22、设置缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot; /&gt;</div></pre></td></tr></table></figure>
<p>手机页面通常在第一次加载后会进行缓存，然后每次刷新会使用缓存而不是去重新向服务器发送请求。如果不希望使用缓存可以设置no-cache。</p>
<h4 id="23、桌面图标"><a href="#23、桌面图标" class="headerlink" title="23、桌面图标"></a>23、桌面图标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;touch-icon-iphone.png&quot; /&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;76x76&quot; href=&quot;touch-icon-ipad.png&quot; /&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;120x120&quot; href=&quot;touch-icon-iphone-retina.png&quot; /&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; href=&quot;touch-icon-ipad-retina.png&quot; /&gt;</div></pre></td></tr></table></figure>
<p>iOS下针对不同设备定义不同的桌面图标。如果不定义则以当前屏幕截图作为图标。</p>
<p>上面的写法可能大家会觉得会有默认光泽，下面这种设置方法可以去掉光泽效果，还原设计图的效果！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;touch-icon-iphone.png&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>图片尺寸可以设定为57<em>57（px）或者Retina可以定为114</em>114（px），ipad尺寸为72*72（px)</p>
<h4 id="24、启动画面"><a href="#24、启动画面" class="headerlink" title="24、启动画面"></a>24、启动画面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;start.png&quot;/&gt;</div></pre></td></tr></table></figure>
<p>iOS下页面启动加载时显示的画面图片，避免加载时的白屏。<br>可以通过madia来指定不同的大小：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!--iPhone--&gt;</div><div class="line">&lt;link href=&quot;apple-touch-startup-image-320x460.png&quot; media=&quot;(device-width: 320px)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;!-- iPhone Retina --&gt;</div><div class="line">&lt;link href=&quot;apple-touch-startup-image-640x920.png&quot; media=&quot;(device-width: 320px) and (-webkit-device-pixel-ratio: 2)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;!-- iPhone 5 --&gt;</div><div class="line">&lt;link rel=&quot;apple-touch-startup-image&quot; media=&quot;(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)&quot; href=&quot;apple-touch-startup-image-640x1096.png&quot;&gt;</div><div class="line"> </div><div class="line">&lt;!-- iPad portrait --&gt;</div><div class="line">&lt;link href=&quot;apple-touch-startup-image-768x1004.png&quot; media=&quot;(device-width: 768px) and (orientation: portrait)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;!-- iPad landscape --&gt;</div><div class="line">&lt;link href=&quot;apple-touch-startup-image-748x1024.png&quot; media=&quot;(device-width: 768px) and (orientation: landscape)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;!-- iPad Retina portrait --&gt;</div><div class="line">&lt;link href=&quot;apple-touch-startup-image-1536x2008.png&quot; media=&quot;(device-width: 1536px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)&quot; rel=&quot;apple-touch-startup-image&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;!-- iPad Retina landscape --&gt;</div><div class="line">&lt;link href=&quot;apple-touch-startup-image-1496x2048.png&quot;media=&quot;(device-width: 1536px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)&quot;rel=&quot;apple-touch-startup-image&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="25、浏览器私有及其它meta"><a href="#25、浏览器私有及其它meta" class="headerlink" title="25、浏览器私有及其它meta"></a>25、浏览器私有及其它meta</h4><p>以下属性在项目中没有应用过，可以写一个demo测试以下！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!-- QQ浏览器私有 --&gt;</div><div class="line">&lt;!-- 全屏模式 --&gt;</div><div class="line">&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</div><div class="line">&lt;!-- 强制竖屏 --&gt;</div><div class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class="line">&lt;!-- 强制横屏 --&gt;</div><div class="line">&lt;meta name=&quot;x5-orientation&quot; content=&quot;landscape&quot;&gt;</div><div class="line">&lt;!-- 应用模式 --&gt;</div><div class="line">&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</div><div class="line"> </div><div class="line">&lt;!-- UC浏览器私有 --&gt;</div><div class="line">&lt;!-- 全屏模式 --&gt;</div><div class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</div><div class="line">&lt;!-- 强制竖屏 --&gt;</div><div class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</div><div class="line">&lt;!-- 强制横屏 --&gt;</div><div class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;landscape&quot;&gt;</div><div class="line">&lt;!-- 应用模式 --&gt;</div><div class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</div><div class="line"></div><div class="line">其它,针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓</div><div class="line"></div><div class="line">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</div><div class="line"></div><div class="line">微软的老式浏览器</div><div class="line"></div><div class="line">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</div><div class="line"></div><div class="line">windows phone 点击无高光</div><div class="line"></div><div class="line">&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="26、-IOS中input键盘事件keyup、keydown、keypress支持不是很好"><a href="#26、-IOS中input键盘事件keyup、keydown、keypress支持不是很好" class="headerlink" title="26、 IOS中input键盘事件keyup、keydown、keypress支持不是很好"></a>26、 IOS中input键盘事件keyup、keydown、keypress支持不是很好</h4><p>问题是这样的，用input search做模糊搜索的时候，在键盘里面输入关键词，会通过ajax后台查询，然后返回数据，然后再对返回的数据进行关键词标红。</p>
<p>用input监听键盘keyup事件，在安卓手机浏览器中是可以的，但是在ios手机浏览器中变红很慢，用输入法输入之后，并未立刻相应keyup事件，只有在通过删除之后才能相应！</p>
<p>解决办法：<br>可以用html5的oninput事件去代替keyup<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; id=&quot;testInput&quot;&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  document.getElementById(&apos;testInput&apos;).addEventListener(&apos;input&apos;, function(e)&#123;</div><div class="line">    var value = e.target.value;</div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>然后就达到类似keyup的效果！</p>
<h4 id="27、h5网站input-设置为type-number的问题"><a href="#27、h5网站input-设置为type-number的问题" class="headerlink" title="27、h5网站input 设置为type=number的问题"></a>27、h5网站input 设置为type=number的问题</h4><p>h5网页input 的type设置为number一般会产生三个问题，一个问题是maxlength属性不好用了。另外一个是form提交的时候，默认给取整了。三是部分安卓手机出现样式问题。</p>
<p>问题一解决，我目前用的是js。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;number&quot; oninput=&quot;checkTextLength(this ,10)&quot;&gt; </div><div class="line"> </div><div class="line">function checkTextLength(obj, length) &#123; </div><div class="line">      if(obj.value.length &gt; length)  &#123;    </div><div class="line">        obj.value = obj.value.substr(0, length); </div><div class="line">      &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>问题二，是因为form提交默认做了表单验证，step默认是1,要设置step属性，假如保留2位小数，写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;number&quot; step=&quot;0.01&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>关于step，我在这里做简单的介绍，input 中type=number，一般会自动生成一个上下箭头，点击上箭头默认增加一个step，点击下箭头默认会减少一个step。number中默认step是1。也就是step=0.01,可以允许输入2位小数，并且点击上下箭头分别增加0.01和减少0.01。</p>
<p>假如step和min一起使用，那么数值必须在min和max之间。</p>
<p>看下面的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;number&quot; step=&quot;3.1&quot; min=&quot;1&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>输入框可以输入哪些数字？</p>
<p>首先，最小值是1，那么可以输入1.0，第二个是可以输入（1+3.1）那就是4.1,以此类推，每次点击上下箭头都会增加或者减少3.1，输入其他数字无效。这就是step的简单介绍。</p>
<p>问题三，去除input默认样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input[type=number] &#123;</div><div class="line">  -moz-appearance:textfield;</div><div class="line">&#125;</div><div class="line">input[type=number]::-webkit-inner-spin-button,</div><div class="line">input[type=number]::-webkit-outer-spin-button &#123;</div><div class="line">  -webkit-appearance: none;</div><div class="line">  margin: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="28、ios-设置input-按钮样式会被默认样式覆盖"><a href="#28、ios-设置input-按钮样式会被默认样式覆盖" class="headerlink" title="28、ios 设置input 按钮样式会被默认样式覆盖"></a>28、ios 设置input 按钮样式会被默认样式覆盖</h4><p>解决方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input,</div><div class="line">textarea &#123;</div><div class="line">  border: 0;</div><div class="line">  -webkit-appearance: none; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置默认样式为none</p>
<h4 id="29、IOS键盘字母输入，默认首字母大写"><a href="#29、IOS键盘字母输入，默认首字母大写" class="headerlink" title="29、IOS键盘字母输入，默认首字母大写"></a>29、IOS键盘字母输入，默认首字母大写</h4><p>解决方案，设置如下属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h4 id="30、select-下拉选择设置右对齐"><a href="#30、select-下拉选择设置右对齐" class="headerlink" title="30、select 下拉选择设置右对齐"></a>30、select 下拉选择设置右对齐</h4><p>设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select option &#123;</div><div class="line">direction: rtl;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="31、通过transform进行skew变形，rotate旋转会造成出现锯齿现象"><a href="#31、通过transform进行skew变形，rotate旋转会造成出现锯齿现象" class="headerlink" title="31、通过transform进行skew变形，rotate旋转会造成出现锯齿现象"></a>31、通过transform进行skew变形，rotate旋转会造成出现锯齿现象</h4><p>可以设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-transform: rotate(-4deg) skew(10deg) translateZ(0);</div><div class="line"> transform: rotate(-4deg) skew(10deg) translateZ(0);</div><div class="line"> outline: 1px solid rgba(255,255,255,0)</div></pre></td></tr></table></figure></p>
<h4 id="32、移动端点击300ms延迟"><a href="#32、移动端点击300ms延迟" class="headerlink" title="32、移动端点击300ms延迟"></a>32、移动端点击300ms延迟</h4><p>300ms尚可接受，不过因为300ms产生的问题，我们必须要解决。300ms导致用户体验并不是很好，解决这个问题，我们一般在移动端用tap事件来取代click事件。</p>
<p>推荐两个js，一个是fastclick，一个是tap.js</p>
<p>关于300ms延迟，具体请看：<a href="http://thx.github.io/mobile/300ms-click-delay/" target="_blank" rel="external">http://thx.github.io/mobile/300ms-click-delay/</a></p>
<h4 id="33、移动端点透问题"><a href="#33、移动端点透问题" class="headerlink" title="33、移动端点透问题"></a>33、移动端点透问题</h4><p>案例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;haorooms&quot;&gt;点头事件测试&lt;/div&gt;</div><div class="line">&lt;a href=&quot;#&quot;&gt;www.xxx.com&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>div是绝对定位的蒙层,并且z-index高于a。而a标签是页面中的一个链接，我们给div绑定tap事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;#haorooms&apos;).on(&apos;tap&apos;,function()&#123;</div><div class="line">$(&apos;#haorooms&apos;).hide();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们点击蒙层时 div正常消失，但是当我们在a标签上点击蒙层时，发现a链接被触发，这就是所谓的点透事件。</p>
<p>原因：</p>
<p>touchstart 早于 touchend 早于click。 亦即click的触发是有延迟的，这个时间大概在300ms左右，也就是说我们tap触发之后蒙层隐藏， 此时 click还没有触发，300ms之后由于蒙层隐藏，我们的click触发到了下面的a链接上。</p>
<p>解决：<br>（1）尽量都使用touch事件来替换click事件。例如用touchend事件(推荐)。<br>（2）用fastclick，<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">https://github.com/ftlabs/fastclick</a><br>（3）用preventDefault阻止a标签的click<br>（4）延迟一定的时间(300ms+)来处理事件 （不推荐）<br>（5）以上一般都能解决，实在不行就换成click事件。</p>
<p>下面介绍一下touchend事件，如下：</p>
<p>$(“#haorooms”).on(“touchend”, function (event) {<br>   event.preventDefault();</p>
<p>});</p>
<h4 id="34、消除-IE10-里面的那个叉号"><a href="#34、消除-IE10-里面的那个叉号" class="headerlink" title="34、消除 IE10 里面的那个叉号"></a>34、消除 IE10 里面的那个叉号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input:-ms-clear&#123;display:none;&#125;</div></pre></td></tr></table></figure>
<h4 id="35、关于-iOS-与-OS-X-端字体的优化-横竖屏会出现字体加粗不一致等"><a href="#35、关于-iOS-与-OS-X-端字体的优化-横竖屏会出现字体加粗不一致等" class="headerlink" title="35、关于 iOS 与 OS X 端字体的优化(横竖屏会出现字体加粗不一致等)"></a>35、关于 iOS 与 OS X 端字体的优化(横竖屏会出现字体加粗不一致等)</h4><p>iOS 浏览器横屏时会重置字体大小，设置 text-size-adjust 为 none 可以解决 iOS 上的问题，但桌面版 Safari 的字体缩放功能会失效，因此最佳方案是将 text-size-adjust 为 100% 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-text-size-adjust: 100%;</div><div class="line">-ms-text-size-adjust: 100%;</div><div class="line">text-size-adjust: 100%;</div></pre></td></tr></table></figure></p>
<h4 id="36、关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"><a href="#36、关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格" class="headerlink" title="36、关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"></a>36、关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</h4><p>可以通过正则去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.value = this.value.replace(/\u2006/g, &apos;&apos;);</div></pre></td></tr></table></figure></p>
<h4 id="37、移动端-HTML5-audio-autoplay-失效问题"><a href="#37、移动端-HTML5-audio-autoplay-失效问题" class="headerlink" title="37、移动端 HTML5 audio autoplay 失效问题"></a>37、移动端 HTML5 audio autoplay 失效问题</h4><p>这个不是 BUG，由于自动播放网页中的音频或视频，会给用户带来一些困扰或者不必要的流量消耗，所以苹果系统和安卓系统通常都会禁止自动播放和使用 JS 的触发播放，必须由用户来触发才可以播放。</p>
<p>解决方法思路：先通过用户 touchstart 触碰，触发播放并暂停（音频开始加载，后面用 JS 再操作就没问题了）。</p>
<p>解决代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.addEventListener(&apos;touchstart&apos;, function () &#123;</div><div class="line">  document.getElementsByTagName(&apos;audio&apos;)[0].play();</div><div class="line">  document.getElementsByTagName(&apos;audio&apos;)[0].pause();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="38、移动端-HTML5-input-date-不支持-placeholder-问题"><a href="#38、移动端-HTML5-input-date-不支持-placeholder-问题" class="headerlink" title="38、移动端 HTML5 input date 不支持 placeholder 问题"></a>38、移动端 HTML5 input date 不支持 placeholder 问题</h4><p>这个我感觉没有什么好的解决方案，用如下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&apos;date&apos;)&quot;  id=&quot;date&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>有的浏览器可能要点击两遍！</p>
<h4 id="39、部分机型存在type为search的input，自带close按钮样式修改方法"><a href="#39、部分机型存在type为search的input，自带close按钮样式修改方法" class="headerlink" title="39、部分机型存在type为search的input，自带close按钮样式修改方法"></a>39、部分机型存在type为search的input，自带close按钮样式修改方法</h4><p>有些机型的搜索input控件会自带close按钮（一个伪元素），而通常为了兼容所有浏览器，我们会自己实现一个，此时去掉原生close按钮的方法为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#Search::-webkit-search-cancel-button&#123;</div><div class="line">  display: none; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果想使用原生close按钮，又想使其符合设计风格，可以对这个伪元素的样式进行修改。</p>
<h4 id="40、唤起select的option展开"><a href="#40、唤起select的option展开" class="headerlink" title="40、唤起select的option展开"></a>40、唤起select的option展开</h4><p>zepto方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(sltElement).trrgger(&quot;mousedown&quot;);</div><div class="line"></div><div class="line">原生js方式:</div><div class="line"></div><div class="line">function showDropdown(sltElement) &#123;</div><div class="line">  var event;</div><div class="line">  event = document.createEvent(&apos;MouseEvents&apos;);</div><div class="line">  event.initMouseEvent(&apos;mousedown&apos;, true, true, window);</div><div class="line">  sltElement.dispatchEvent(event);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="41拓展"><a href="#41拓展" class="headerlink" title="41拓展:"></a>41拓展:</h4><p>关于IOS下 div,span点击问题,<a href="https://github.com/facebook/react/issues/134" target="_blank" rel="external">https://github.com/facebook/react/issues/134</a>，这里有人讨论。<br>我感觉就是IOS 为了节省资源，把所有元素的点击事件分成个部分，可点击的，不可点击的，进行资源分化。<br>我总结了几条可以用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">将目标元素换成 &lt;a&gt; 或者 &lt;button&gt; 等可点击的元素</div><div class="line">将 click 元素委托到非 document 或 body 的父级元素上</div><div class="line">给目标元素加一条样式规则 cursor: pointer;</div></pre></td></tr></table></figure></p>
<p>但是cursor：pointer；特殊情况下还是不起作用。<br>我这里写了一个demo，感兴趣的可以测试下.<br><a href="http://moustache.coding.me/Moutache/work/1.html" target="_blank" rel="external">点击demo</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;mid=2651493053&amp;idx=1&amp;sn=8409bc267cd73229425a915f27f6a27f&amp;scene=0#wechat_redirect" target="_blank" rel="external">前40条来自这里</a><br>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2542851-d52db9d6257eeb7e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;感觉好久没写博客了,可能自己都觉得太冷清,所以才搬来一篇文章..(手动滑稽)&lt;/p&gt;
&lt;p&gt;看完感觉作者君好好的安利了一下fastclick.js&lt;/p&gt;
&lt;p&gt;不过移动端的点击事件确实令人蛋疼，再比如说IOS下div,span非可点击元素事件失败,关于这点我作为一个小拓展放到最后来写。&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>同步执行引起的小Bug</title>
    <link href="http://yoursite.com/2017/06/03/%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%E5%BC%95%E8%B5%B7%E7%9A%84%E5%B0%8FBug/"/>
    <id>http://yoursite.com/2017/06/03/同步执行引起的小Bug/</id>
    <published>2017-06-03T11:02:03.000Z</published>
    <updated>2017-06-03T11:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4030811-28c8eefe3609af9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="alt text"></p>
<a id="more"></a><!--more-->
<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>需求是这样的，点击按钮，查询的时候，body 动态加载个“加载动画”。需求很明确，也确实很简单。</p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>项目前提里有一部分必须是同步执行的。<br>当时就全局设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.ajaxSetup(&#123;</div><div class="line">    async: false</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>同步模块结束以后，我忘了在改过来了。</p>
<p>然后小Bug 就产生了。</p>
<p>正常进程状态： 点击查询按钮-&gt;Body添加节点，节点里内容为（等待Loading）-&gt;按条件进行搜索，返回数据（2s左右）-&gt;生成图形报表-&gt;更改Loading状态-&gt;生成图形报表图片。</p>
<p>Bug进程状态: 点击查询按钮-&gt;Body添加节点（这里节点生成了，但节点里的内容【等待loading】等待并没有出来）-&gt;按条件进行搜索，返回数据（2s左右），<strong>这时候节点内容出来了</strong>-&gt;生成图形报表-&gt;更改Loading状态-&gt;生成图形报表图片。</p>
<p>我在浏览器里测试时，还在奇怪。节点出来了，但是节点内容的标签当时是点不出来的，当时的进程应该是正在获取数据，有了数据又返回来执行加载节点内容。</p>
<p><img src="https://ws1.sinaimg.cn/large/9150e4e5ly1fdx3658ia7j203j03o742.jpg" alt="还有这种操作？"></p>
<h4 id="另一个问题"><a href="#另一个问题" class="headerlink" title="另一个问题"></a>另一个问题</h4><p>我记得前些日子还有一个挺奇怪的问题，现在也没确定问题的所在，程序是在异步里执行的，生成一个大的二维数组数据，获取这个数据要级联七八个表，而且表里的内容格式还很复杂，还要对内容进行二次处理，大约5-6秒的时间 （时间不稳定）。/笑哭。</p>
<p> 获取数据后，先输入这个二维表格，在输出二维表格里的某一行的数据（这三个是放在一个事件里的），像这样：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(subTable);</div><div class="line">console.log(subTable[1][1]);</div><div class="line">console.log(subTable[2][1]);</div></pre></td></tr></table></figure></p>
<p> 然后问题出现了，subTable的数据全出来了，但是后面的两个数据，还是<strong>默认</strong>的数据！！</p>
<p>我又测试了几次，响应时间短的时候，这两行的某一个数据能出来，有时候还是初始数据。因为当时项目赶得及，我把代码结构就给改了，现在还原也还原不过来了。。。</p>
<p>不过倒是有几点不靠谱的猜测，不过我感觉最可能的是，那时候的代码环境复杂。我所描绘的事件并不是完全事件。。</p>
<p>事后，我试着还原整个事情的经过，但是都没有到达那时的诡异效果。</p>
<p>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4030811-28c8eefe3609af9f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS Bug" scheme="http://yoursite.com/tags/JS-Bug/"/>
    
  </entry>
  
  <entry>
    <title>小试Mustache，封装自己的样式模板</title>
    <link href="http://yoursite.com/2017/05/18/%E5%B0%8F%E8%AF%95Mustache%EF%BC%8C%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A0%B7%E5%BC%8F%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/05/18/小试Mustache，封装自己的样式模板/</id>
    <published>2017-05-18T09:42:07.000Z</published>
    <updated>2017-05-18T10:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/626151-1dfbca9a11951b3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>(图片与本文无关)</p>
<a id="more"></a><!--more-->
<h4 id="先啰嗦点别的"><a href="#先啰嗦点别的" class="headerlink" title="先啰嗦点别的"></a>先啰嗦点别的</h4><p>说实话，其实现在框架满天飞的时代，做这个感觉也没什么。<br>但是对我而言，从我自身的角度理解觉得这么做还是挺有必要的，现在前端发展的太快了。<br>前辈们都是一步一个脚印的探索。我打个比方：可能就像从1数到10，（1,2,3,4,5,6,7,8,9,10）。而我呢（1,5,10）。固然是数到10了，但中间总是差点什么。<br>就像一栋楼，而我造的就是一栋“危楼“。<br>也不想过多谈什么大道理，价值观不一样，想法也许就有歧义，我姥爷曾跟我说“这世上除了知识和身体之外都不是真正属于自己的。“我深以为然。 </p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么会有模板的存在，让公共样式有更强复用性，也让代码更加的可读。</p>
<p>这是个是个Header的模板，有三个变量，左边的图标，中间展示的名字，还有右边的图标，在Mustache里，模板接受对象后，通过双括号的方式来进行获取定义的值，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div class=&quot;qyui-header jy_theme&quot;&gt;</div><div class="line">    &lt;div class=&quot;qyui-header-left&quot;&gt;</div><div class="line">        &lt;a class=&quot;icon &#123;&#123;left-icon&#125;&#125; f-white f30&quot;&gt;&lt;/a&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;h1 class=&quot;qyui-header-title&quot;&gt;&#123;&#123;headName&#125;&#125;&lt;/h1&gt;</div><div class="line">    &lt;div class=&quot;qyui-header-right&quot;&gt;</div><div class="line">        &lt;a class=&quot;icon &#123;&#123;right-icon&#125;&#125; f-white f30&quot;&gt;&lt;/a&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><b>header的数据</b> 传对应的参数给对应的模板,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var headerData = &#123;</div><div class="line">      &quot;headName&quot;: &apos;我是标题&apos;,</div><div class="line">      &quot;left-icon&quot;: &apos;icon-29&apos;,</div><div class="line">      &quot;right-icon&quot;: &apos;icon-81&apos;</div><div class="line">  &#125;;</div><div class="line">   var allTpl = new template();</div><div class="line">  allTpl.loadHeader(headerData, &quot;header_wrap&quot;);</div></pre></td></tr></table></figure></p>
<p>异步调用模板文件，把数据加载进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">loadHeader(userdefind, parent) &#123;</div><div class="line">   userdefind[&quot;left-icon&quot;] ? &apos;&apos; : userdefind[&quot;left-icon&quot;] = &apos;icon-29&apos;;</div><div class="line">   userdefind[&quot;right-icon&quot;] ? &apos;&apos; : userdefind[&quot;right-icon&quot;] = &apos;icon-81&apos;;</div><div class="line">   $.get(&quot;../template/header.tpl&quot;, (tpl) =&gt;</div><div class="line">      $(&quot;#&quot; + parent).append(Mustache.render(tpl, userdefind))</div></pre></td></tr></table></figure></p>
<p>做了个图标的默认样式，调用模板文件，在传入的父级ID下载入模板。</p>
<h4 id="看看循环"><a href="#看看循环" class="headerlink" title="看看循环"></a>看看循环</h4><p>在Mustache里页面里加了data（data是你自定义的对象数据）,判断Mustache通过判断参数长度来进行渲染，当然循环里还可以在套一个循环，就像下面的other里的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;#data&#125;&#125;</div><div class="line"> &lt;div class=&quot;common_search_wrap jy_theme bs&quot;&gt;</div><div class="line">           &lt;div class=&quot;rel wd80 mg_0_at&quot;&gt;</div><div class="line">               &lt;div class=&quot;icon_content_str &#123;&#123;icon-color&#125;&#125;&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</div><div class="line">               &lt;input type=&quot;text&quot; class=&quot;qyui_input_common &#123;&#123;data-time&#125;&#125;&quot; placeholder=&quot;&#123;&#123;placeholder&#125;&#125;&quot; id=&quot;&#123;&#123;id&#125;&#125;&quot;&gt;</div><div class="line">           &lt;/div&gt;</div><div class="line">           &#123;&#123;#other&#125;&#125;</div><div class="line">           &lt;div class=&quot;rel wd80 mg_1_at&quot;&gt;</div><div class="line">               &lt;div class=&quot;icon_content_str &#123;&#123;icon-color&#125;&#125;&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</div><div class="line">               &lt;input type=&quot;text&quot; class=&quot;qyui_input_common&quot; placeholder=&quot;&#123;&#123;placeholder&#125;&#125;&quot; id=&quot;&#123;&#123;id&#125;&#125;&quot;&gt;</div><div class="line">           &lt;/div&gt;</div><div class="line">           &#123;&#123;/other&#125;&#125;</div><div class="line">       &lt;/div&gt;</div><div class="line"></div><div class="line">  </div><div class="line">       &lt;div class=&quot;carr_query_botton&quot; id=&quot;&#123;&#123;query-id&#125;&#125;&quot;&gt;</div><div class="line">           &lt;div class=&quot;  rel wd80 mg_0_at&quot;&gt;</div><div class="line">               &lt;div class=&quot;qy_buttom &#123;&#123;query-bg&#125;&#125;&quot;&gt;</div><div class="line">                   &#123;&#123;query-name&#125;&#125;</div><div class="line">               &lt;/div&gt;</div><div class="line">           &lt;/div&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">&#123;&#123;/data&#125;&#125;</div></pre></td></tr></table></figure>
<p>数据：循环里在套内部循环，这个外层只渲染了一次，内部由other进行循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var searchData = &#123;</div><div class="line">               &quot;name&quot;: &apos;D&apos;,</div><div class="line">               &quot;data-time&quot;: &apos;data-time&apos;,</div><div class="line">               &quot;placeholder&quot;: &apos;查询日期&apos;,</div><div class="line">               &quot;id&quot;: &apos;begDate&apos;,</div><div class="line">               &quot;icon-color&quot;: &apos;icon_green&apos;,</div><div class="line">               &quot;other&quot;: [&#123;</div><div class="line">                   &quot;name&quot;: &apos;T&apos;,</div><div class="line">                   &quot;placeholder&quot;: &apos;查询站点&apos;,</div><div class="line">                   &quot;id&quot;: &apos;station&apos;,</div><div class="line">                   &quot;icon-color&quot;: &apos;icon_orange&apos;,</div><div class="line">               &#125;,&#123;</div><div class="line">                   &quot;name&quot;: &apos;F&apos;,</div><div class="line">                   &quot;placeholder&quot;: &apos;其他&apos;,</div><div class="line">                   &quot;id&quot;: &apos;station22&apos;,</div><div class="line">                   &quot;icon-color&quot;: &apos;icon_pur&apos;,</div><div class="line">			&#125;],</div><div class="line">               &quot;query-id&quot;: &quot;query&quot;,</div><div class="line">               &quot;query-name&quot;: &quot;查询&quot;,</div><div class="line">               &quot;query-bg&quot;: &apos;icon_green&apos;</div><div class="line">           &#125;;</div></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> var content = &#123;</div><div class="line">             &quot;data&quot;: searchData</div><div class="line">      &#125;</div><div class="line"> allTpl.loadSearch(content, &apos;search_wrap&apos;)</div><div class="line">方法：  </div><div class="line">loadSearch(userdefind, parent) &#123;</div><div class="line">     $.get(&quot;../template/commonSearch.tpl&quot;, (tpl) =&gt;</div><div class="line">         $(&quot;#&quot; + parent).append(Mustache.render(tpl, userdefind))</div><div class="line">     )</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>主体思路还是挺简单的，通过Mustache 创建模板，在通过data传参，渲染模板加载到内容。</p>
<p>以前刚学Vue时，学习效率挺低的，有些东西都是死记硬背， 我觉得有时候不管学什么东西，一些原理思想还是要需要明白的，硬上的话程序和自己两败俱伤。</p>
<p>关于Mustache的用法可以去网上搜搜，现在前端工程大部分都用框架了吧，不知道用这种的还多不多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/626151-1dfbca9a11951b3f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;(图片与本文无关)&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>一个面试题引起的事件委托</title>
    <link href="http://yoursite.com/2017/04/25/%E4%B8%80%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E8%B5%B7%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>http://yoursite.com/2017/04/25/一个面试题引起的事件委托/</id>
    <published>2017-04-25T08:37:12.000Z</published>
    <updated>2017-04-25T08:40:10.712Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3459828-fe024299e76685da.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>(图片与本文无关)<br><a id="more"></a><!--more--></p>
<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>从掘金看到一篇文章<a href="https://juejin.im/post/58f558efac502e006c3e5c97" target="_blank" rel="external">破解前端面试（80% 应聘者不及格系列）：从 DOM 说起</a>。<br> 有题目，就顺着做了，然后自己稍加改动了一下，最后就索性当个例子，记录下来。</p>
<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>什么是事件委托？</p>
<p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p>
<p>网上有这么个收快递的例子来讲解事件委托：<br>快递员把快递寄到公司，由前台代收，判断东西是谁的，然后分发给物主。<br>如果每个员工挨个接收的话，就影响了办公效率。</p>
<p>在程序里也是一样的，每个函数都是对象，都会占用内存，内存中的对象越多，性能就越差。如果使用事件委托，那么就只针对它的父级进行操作（利用冒泡事件）。</p>
<p>网上随便找了个<a href="http://www.jb51.net/article/76293.htm" target="_blank" rel="external">例子</a>，不使用事件委托的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myLinks"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"goSomewhere"</span> &gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"doSomething"</span> &gt;</span>Do something<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"sayHi"</span> &gt;</span>Say hi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> item1=<span class="built_in">document</span>.getElementById(<span class="string">"goSomewhere"</span>);</div><div class="line"><span class="keyword">var</span> item2=<span class="built_in">document</span>.getElementById(<span class="string">"doSomething"</span>);</div><div class="line"><span class="keyword">var</span> item3=<span class="built_in">document</span>.getElementById(<span class="string">"sayHi"</span>);</div><div class="line">item1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'goSomewhere'</span>);</div><div class="line">&#125;</div><div class="line">item2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doSomething'</span>);</div><div class="line">&#125;</div><div class="line">item3.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">"hello"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个是顺着掘金文章写得一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;input type=&quot;button&quot; name=&quot;&quot; id=&quot;btn&quot; value=&quot;add&quot; /&gt;</div><div class="line">    &lt;ul id=&quot;ndContainer&quot;&gt;</div><div class="line">        &lt;li&gt;1&lt;/li&gt;</div><div class="line">        &lt;li&gt;2&lt;/li&gt;</div><div class="line">        &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line"></div><div class="line">    &lt;script&gt;</div><div class="line">        window.onload = function() &#123;</div><div class="line"></div><div class="line">            var ndBtn = document.querySelector(&apos;#btn&apos;);</div><div class="line"></div><div class="line">            var ndContainer = document.querySelector(&apos;#ndContainer&apos;);</div><div class="line"></div><div class="line">            var ndLi = document.getElementsByTagName(&apos;li&apos;);</div><div class="line"></div><div class="line">            ndContainer.addEventListener(&apos;mouseover&apos;, function() &#123;</div><div class="line">                var ev = ev || window.event;</div><div class="line">                var target = ev.target || ev.srcElement;</div><div class="line">                if (target.nodeName == &quot;LI&quot;) &#123;</div><div class="line">                    alert(target.innerHTML);</div><div class="line">                &#125; else &#123;</div><div class="line">                    alert(target.nodeName);</div><div class="line">                    //mouseenter,不冒泡</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            ndBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">                var length = ndLi.length;</div><div class="line">                var createLi = document.createElement(&apos;li&apos;);</div><div class="line">                createLi.innerHTML = length + 1;</div><div class="line">                ndContainer.appendChild(createLi);</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>使用事件委托不用去挨个遍历元素的节点，通过target的属性判断元素，执行事件。</p>
<p>特意使用了moseenter这个不冒泡的方法测试了一下。</p>
<p>总结一下事件委托的优点吧：提高性能，提高代码质量，减少代码量，给别人看的时候也会很舒服。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>顺着这个例子再说说别的，如果你细心的话你应该看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var ndBtn = document.querySelector(&apos;#btn&apos;);</div><div class="line"></div><div class="line">var ndContainer = document.querySelector(&apos;#ndContainer&apos;);</div><div class="line"></div><div class="line">var ndLi = document.getElementsByTagName(&apos;li&apos;);</div></pre></td></tr></table></figure></p>
<p>为什么 ndLi 不用querySelectorAll来获取？<br>先来看看他们是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  var ndLi = document.getElementsByTagName(&apos;li&apos;);</div><div class="line">  var testLi = document.querySelectorAll(&apos;li&apos;);</div><div class="line">  console.log(&quot;ByTagName&quot; + ndLi);</div><div class="line">  console.log(&quot;querySelectorAll&quot; + testLi);</div><div class="line"></div><div class="line">ByTagName[object HTMLCollection]</div><div class="line">querySelectorAll[object NodeList]</div></pre></td></tr></table></figure>
<p>console.log里为什么没加toString方法是因为“前面字符串+“导致隐式类型转换了，不明白的可以<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">戳这</a>。</p>
<p>一个是object HTMLCollection 一个是object NodeList</p>
<blockquote>
<p>objectNodeList-The NodeList object returned by the querySelectorAll() method must be static ([DOM], section 8).</p>
</blockquote>
<p>它返回的是一个静态的NodelIst对象。<br>如果使用这个add方法下 就一直是4 ，4， 4。</p>
<blockquote>
<p>object HTMLCollection-An HTMLCollection is a list of nodes. An individual node may be accessed by either ordinal index or the node’s name or id attributes.<br>Note: Collections in the HTML DOM are assumed to be live meaning that they are automatically updated when the underlying document is changed.</p>
</blockquote>
<p>而HTMLCollection是一个动态的元素集合，每次文档每次改变时都会重新对文档进行查询。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>有些东西写的不够详细，包括最后的其他，如果感兴趣想了解的朋友自己搜一下。</p>
<p>如果有不对的地方，烦请指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3459828-fe024299e76685da.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;(图片与本文无关)&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>老街</title>
    <link href="http://yoursite.com/2017/04/16/%E8%80%81%E8%A1%97/"/>
    <id>http://yoursite.com/2017/04/16/老街/</id>
    <published>2017-04-16T03:28:29.000Z</published>
    <updated>2017-04-16T03:31:08.826Z</updated>
    
    <content type="html"><![CDATA[<p>晚上无事，突然想去老街看看。</p>
<p>老街上还有写着拆字的房子。</p>
<p>老街的市场里还是那股子混杂着海鲜和垃圾臭烘烘的腥儿味。</p>
<p>老街的巷子口趴着一只土狗，懒洋洋的，我过去的时候，只是抬眼看了一眼。</p>
<p>我记得以前，打这路过的时候，小家伙总是喊上几嗓子，过来嗅嗅我，然后再主人的责骂声下离开。</p>
<p>老街的小巷子里，有一段胡同叫“猫叫小巷”。</p>
<p>只是身边少了那个跟我笑眯眯的说“如果我们走散了，就来猫叫小巷会和”的人了。</p>
<p>老街的河边依旧是泛绿的河水，摇曳的杨柳，只是河边缺少了那群嬉闹的人群。</p>
<p>夏天的飞鸟，飞到我的窗前唱歌，又飞去了。 秋天的黄叶，它们没有什么可唱，只叹息一声，飞落在那里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;晚上无事，突然想去老街看看。&lt;/p&gt;
&lt;p&gt;老街上还有写着拆字的房子。&lt;/p&gt;
&lt;p&gt;老街的市场里还是那股子混杂着海鲜和垃圾臭烘烘的腥儿味。&lt;/p&gt;
&lt;p&gt;老街的巷子口趴着一只土狗，懒洋洋的，我过去的时候，只是抬眼看了一眼。&lt;/p&gt;
&lt;p&gt;我记得以前，打这路过的时候，小家伙
    
    </summary>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>学习Vuex写的一个小项目（我也不知道起个什么标题）</title>
    <link href="http://yoursite.com/2017/04/08/%E5%AD%A6%E4%B9%A0Vuex%E5%86%99%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E8%B5%B7%E4%B8%AA%E4%BB%80%E4%B9%88%E6%A0%87%E9%A2%98%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/08/学习Vuex写的一个小项目（我也不知道起个什么标题）/</id>
    <published>2017-04-08T04:35:46.000Z</published>
    <updated>2017-04-08T04:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2071553-340fceadb00a383f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这篇文章就说说Vuex。<br><a id="more"></a><!--more--></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>上次学习Vue,然后尝试在项目里封装了一个小项目模块，流程不复杂，感觉效果还不错。<br>这次写个demo主要为了学习一下Vuex,本来想在官方找随便找2个例子打打算了，但一开始看时，没怎么塌下心来，搁置了一段时间之后，这次找回来，写一个简单的小项目来拓展一下。</p>
<p>而且以后再拓展新东西，就直接放到这个项目里了。</p>
<p>这也是一个渐进式的学习demo。</p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>一个知乎的热门新闻。<br><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/149162225727.png" alt=""><br><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/149162536412.png" alt=""><br>这是首页和详情页。<br>引入了mint-ui，目前只引入了header和轮播。<br>将来可能使用这个框架，这里简单使用一下。<br>正文内容使用flex进行布局。</p>
<p>首页的内容通过Vuex 来管理内容。<br>不过多的解释它是什么，我就说说我的看法。<br>它就是个内容管理器，分发数据，获得数据集。<br>为什么用它？<br>其实在项目里，你完全可以一口气写下来，一些轻量级别的项目完全不需要引入它。<br>我讲讲我对它的理解：<br>假如你是一个很小的餐厅老板，假设你每天干四件事，买菜，烹饪，刷碗，数钱。<br>人流量不是很多，ok，你自己可以完全胜任。虽说你可能很累。<br>但是，当你的餐馆做大了，你发现 你没这么多精力了。<br>你需要聘请员工来帮你，你找一个买菜的，找了一个做饭的，找了一个刷碗的，找了一个财务。<br>让更专业的人去做这些事。<br>这时，就把任务分发出去了。<br>来看看代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">     name: &apos;app&apos;,</div><div class="line">     components: &#123;</div><div class="line">         Header,</div><div class="line">         indexList,</div><div class="line">         tag,</div><div class="line">         qyfooter,        </div><div class="line">     &#125;,</div><div class="line">     created()&#123;</div><div class="line">         this.getList();</div><div class="line">     &#125;,</div><div class="line">     computed:&#123;</div><div class="line">         ...mapGetters([&apos;DONE_HOT_NEWS&apos;])</div><div class="line">     &#125;,</div><div class="line">     methods:&#123;</div><div class="line">         getList:function()&#123;</div><div class="line">             this.$store.dispatch(&apos;FETCH_HOT_NEWS&apos;)</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>created钩子（实例已经创建完成之后被调用）里调用了getList这个方法，分发事件FETCH_HOT_NEWS.<br><strong>这就相当于 天刚刚亮的时候，该去买菜了。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const actions = &#123;</div><div class="line">    [types.FETCH_HOT_NEWS](&#123; commit &#125;) &#123;</div><div class="line">        axios.get(BIRD + &apos;http://news-at.zhihu.com/api/3/news/hot&apos;)</div><div class="line">            .then(res =&gt; &#123;</div><div class="line">                console.log(res.data);</div><div class="line">                commit(types.TOGGLE_HOT_NEWS, res.data.recent)</div><div class="line">            &#125;)</div><div class="line">            .catch(err =&gt; console.log(err));</div><div class="line">    &#125;,</div><div class="line">    [types.FETCH_NEWS_DETAIL](&#123; commit &#125;, conurl) &#123;</div><div class="line">        axios.get(BIRD + conurl)</div><div class="line">            .then(res =&gt; commit(types.TOGGLE_NEWS_DETAIL, res.data))</div><div class="line">            .catch(err =&gt; console.log(err));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>网络请求使用了axios，BIRD是一个反向代理，从这获取数据。<br><strong>你选好每天必要的菜品</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const mutations = &#123;</div><div class="line">    [types.TOGGLE_HOT_NEWS](state, all) &#123;</div><div class="line">        state.HotNews = all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>老板结账。这个过程是个异步的过程，但是如果都写在mutaions显得臃肿。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const getters = &#123;</div><div class="line">    [types.DONE_HOT_NEWS]: state =&gt; &#123;</div><div class="line">        return state.HotNews</div><div class="line">    &#125;,</div><div class="line">    [types.DONE_NEWS_DETAIL]: state =&gt; &#123;</div><div class="line">        return state.NewsDetail</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这时，你拿着菜回菜馆了。</strong></p>
<p>获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">template	</div><div class="line">   &lt;div v-for=&quot; item in DONE_HOT_NEWS&quot;&gt;</div><div class="line">        &lt;indexList :src=&quot;item.thumbnail |changeBird&quot; :title=&quot;item.title&quot; :conurl=&quot;item.url&quot;&gt;&lt;/indexList&gt;   </div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">script </div><div class="line"> import &#123;mapGetters&#125; from &apos;vuex&apos;</div><div class="line"> </div><div class="line"> computed:&#123;</div><div class="line">            ...mapGetters([&apos;DONE_HOT_NEWS&apos;])</div><div class="line">        &#125;,</div></pre></td></tr></table></figure></p>
<p>在vuex里引入mapGetters，获得DONE_HOT_NEWS 这个数据集，然后再template里引入循环。<br>在浏览器查看一下状态，当我们代码没有达到预期状态时，来看看Vuex的状态。从哪里挂掉了，有助于减少时间理清头绪。<br><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/149162577213.png" alt=""><br><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/149162577278.png" alt=""></p>
<p>来看看官方的一个图<img src="https://vuex.vuejs.org/zh-cn/images/vuex.png" alt=""></p>
<p>这就是我理解的一个Vuex的一个过程。</p>
<p>多余的代码就不贴了，这次就简单总结一下Vuex的学习笔记。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p><a href="https://github.com/miloers/zhihu" target="_blank" rel="external">代码地址</a>在这，<br>如果你正好需要学习Vuex<br>如果你觉得其它的学习项目里琳琅满目的功能而导致你呼吸急促无心恋战，<br>我想它现在在适合你不过，不过如果你不是近期看的话，请注意提交记录。<br>最后如果能帮助到你，那最好不过了。<br>学习之中，难免有错，希望不吝赐教，共同进步。</p>
<p>项目里的所用的api来自<a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">知乎日报api分析</a> Edit By <a href="https://github.com/izzyleung" target="_blank" rel="external">izzyleung</a></p>
<p>使用vue-cli，vue,vue-router，axios全家桶，进行编码开发。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2071553-340fceadb00a383f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;这篇文章就说说Vuex。&lt;br&gt;
    
    </summary>
    
    
      <category term="Vuex Js" scheme="http://yoursite.com/tags/Vuex-Js/"/>
    
  </entry>
  
  <entry>
    <title>Js数据类型小记</title>
    <link href="http://yoursite.com/2017/03/22/Js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/22/Js数据类型小记/</id>
    <published>2017-03-22T11:55:17.000Z</published>
    <updated>2017-03-22T11:59:24.415Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2235778-71242edfe6eef970.png" alt=""><br>console.log(([])?true:false);<br>console.log(([]==false?true:false));<br>console.log(({}==false)?true:false)<br><a id="more"></a><!--more--></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>今天在群里看到一道题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">console.log(([])?true:false); </div><div class="line">console.log(([]==false?true:false));</div><div class="line">console.log((&#123;&#125;==false)?true:false) </div><div class="line">得到的结果分别是什么？（） </div><div class="line">A. false true true</div><div class="line">B. true true true</div><div class="line">C. true false true</div><div class="line">D. true true false</div></pre></td></tr></table></figure></p>
<p>主要考察数据类型的隐性转换，以及关于“==”类型的比较规则。</p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><h5 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(([])?true:false);</div></pre></td></tr></table></figure>
<p>在这里需要把[]转换为布尔值在进行三目运算。</p>
<h5 id="Boolean类型的转换"><a href="#Boolean类型的转换" class="headerlink" title="Boolean类型的转换"></a>Boolean类型的转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">布尔类型的转换只有以下几种返回false,其它都为true</div><div class="line">Boolean(undefined) // false</div><div class="line">Boolean(null) // false</div><div class="line">Boolean(0) // false 包含（-0，+0）</div><div class="line">Boolean(NaN) // false</div><div class="line">Boolean(&apos;&apos;) // false</div><div class="line"></div><div class="line">对所有对象，包括空对象以及false对应的布尔对象 new Boolean(false)返回也是true</div><div class="line">Boolean(&#123;&#125;) // true</div><div class="line">Boolean([]) // true</div><div class="line">Boolean(new Boolean(false)) // true</div></pre></td></tr></table></figure>
<p>那么第一题就返回true了。</p>
<h5 id="第二，三题"><a href="#第二，三题" class="headerlink" title="第二，三题"></a>第二，三题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2.console.log(([]==false?true:false));</div><div class="line"></div><div class="line">3.console.log((&#123;&#125;==false)?true:false)</div></pre></td></tr></table></figure>
<p>其实我觉得后面返回true和false挺有迷惑作用的，迷惑在不绕弯，前面就做布尔进行比较了 。从上题指导Boolean([])返回的是true，直接做比较 就返回false了。但是</p>
<blockquote>
<p>布尔类型与其它任何类型进行比较，布尔类型将会转换为number类型。</p>
</blockquote>
<p>也就是说里我们又加入了Number类型的转换。</p>
<p>关于<strong>Number</strong>类型的转换</p>
<p>首先调用其valueOf方法，如果返回的是一个原始类型的值，那么通过Number函数对其进行调用。-&gt; 结束.<br>如果返回还是对象，则改为调用对象自身的toString方法，如果返回的是一个原始类型的值，那么通过Number函数对其进行调用。-&gt; 结束。<br>如果返回的还是对象，那么报错。-&gt;结束。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 数值：转换后还是原来的值</div><div class="line">Number(324) // 324</div><div class="line"></div><div class="line">// 字符串：如果可以被解析为数值，则转换为相应的数值</div><div class="line">Number(&apos;324&apos;) // 324</div><div class="line"></div><div class="line">// 字符串：如果不可以被解析为数值，返回NaN</div><div class="line">Number(&apos;324abc&apos;) // NaN</div><div class="line"></div><div class="line">// 空字符串转为0</div><div class="line">Number(&apos;&apos;) // 0</div><div class="line"></div><div class="line">// 布尔值：true 转成1，false 转成0</div><div class="line">Number(true) // 1</div><div class="line">Number(false) // 0</div><div class="line"></div><div class="line">// undefined：转成 NaN</div><div class="line">Number(undefined) // NaN</div><div class="line"></div><div class="line">// null：转成0</div><div class="line">Number(null) // 0</div><div class="line">// []:转为0</div><div class="line">Number([]) //0</div><div class="line">//&#123;&#125;：转为NaN</div><div class="line">Number(&#123;&#125;) // NaN</div></pre></td></tr></table></figure></p>
<p>这里插一句关于toString的应用。我们可以通过toString来判断数据类型。</p>
<blockquote>
<p>实例对象可能会自定义toString方法，覆盖掉Object.prototype.toString方法。通过函数的call方法，可以在任意值上调用Object.prototype.toString方法，帮助我们判断这个值的类型。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">console.log([].toString()); // 返回空</div><div class="line">console.log(Object.prototype.toString.call([]))</div><div class="line">//[object Array]</div><div class="line">我们使用typeof 来判断类型时,对于引用对象和数组对象都返回的是Object</div><div class="line">typeof []</div><div class="line">//&quot;object&quot; </div><div class="line"></div><div class="line">Object.prototype.toString.call(2) // &quot;[object Number]&quot;</div><div class="line">Object.prototype.toString.call(&apos;&apos;) // &quot;[object String]&quot;</div><div class="line">Object.prototype.toString.call(true) // &quot;[object Boolean]&quot;</div><div class="line">Object.prototype.toString.call(undefined) // &quot;[object Undefined]&quot;</div><div class="line">Object.prototype.toString.call(null) // &quot;[object Null]&quot;</div><div class="line">Object.prototype.toString.call(Math) // &quot;[object Math]&quot;</div><div class="line">Object.prototype.toString.call(&#123;&#125;) // &quot;[object Object]&quot;</div><div class="line">Object.prototype.toString.call([]) // &quot;[object Array]&quot;</div></pre></td></tr></table></figure>
<p>那么 Number([])，返回的是0；Number({}),返回的是NaN。</p>
<blockquote>
<p>简单记一下如果Number方法对象的参数是Object时，返回的就是NaN;</p>
</blockquote>
<p>那么二三题，依次返回的就是true和false。</p>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>我只是从题目出发，简单梳理了一下需要的知识点，但是并没有把所有的知识点梳理一遍。<br>文中部分内容参考于<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a>。<br>这次也解决了我的一个问题，我一直以为null是Object来着。 [笑哭]。</p>
<p>曾经在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Number(null) //0</div></pre></td></tr></table></figure></p>
<p>null返回0里还当一个特殊点来记。<br>因为在前文中说到嘛，如果Number方法对象的参数是Object时，返回的就是NaN。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2235778-71242edfe6eef970.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;console.log(([])?true:false);&lt;br&gt;console.log(([]==false?true:false));&lt;br&gt;console.log(({}==false)?true:false)&lt;br&gt;
    
    </summary>
    
    
      <category term="js 面试题" scheme="http://yoursite.com/tags/js-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记：高性能网站建设指南（2）</title>
    <link href="http://yoursite.com/2017/03/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2017/03/19/读书笔记：高性能网站建设指南（2）/</id>
    <published>2017-03-19T02:11:34.000Z</published>
    <updated>2017-03-19T04:06:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于雅虎的14条军规。</p>
<p>关于个人对前端性能优化的认识。</p>
<p>主要记载学习笔记。</p>
<p>读书也并不意味着照本宣科，大部分内容都是根据书中理解然后进行知识拓展，也多聊一聊自己对前端性能的理解，所以理解难免有错，如果有错误，希望不吝指正。<br><a id="more"></a><!--more--></p>
<h4 id="规则5：将样式表放在顶部"><a href="#规则5：将样式表放在顶部" class="headerlink" title="规则5：将样式表放在顶部"></a>规则5：将样式表放在顶部</h4><p>HTML 标准要求把样式表和JS的内容都放在顶部。js内容暂且不说。<br>雅虎团队做了一些有趣的测试。他们为了让网页加载的更快，尝试放在文档底部。<br>但结果，却让用户感觉页面运行的更缓慢了。</p>
<h5 id="逐步呈现"><a href="#逐步呈现" class="headerlink" title="逐步呈现"></a>逐步呈现</h5><p>页面通常都是按顺序进行下载的，设计到底部的初衷是想让用户先看到最重要的组建内容，以及页面内容，最后在进行样式渲染。<br>但是将样式表放在文档底部却会导致浏览器阻止内容的逐步呈现。<br>当时我看到这句话，脑海中产生一副画面，一个小孩从上面扔东西，一个妇人拿个兜子去挨个接，直到没有力气拿不住了，然后把这些东西直接扔到地上。<br>在我想来最后的重物就是这个CSS文件了。</p>
<h5 id="产生的影响"><a href="#产生的影响" class="headerlink" title="产生的影响"></a>产生的影响</h5><h6 id="白屏"><a href="#白屏" class="headerlink" title="白屏"></a>白屏</h6><p>将CSS放到底部会产生短暂的白屏，因为逐步呈现被禁止了。<br><a href="http://stevesouders.com/hpws/css-bottom.php" target="_blank" rel="external">DEMO.</a><br>我记得前几天在segfaultment社区有人提白屏问题。但不是像这种“兜着”的白屏，我觉得他的问题是响应的内容的图片很大，还有些资源找不到。</p>
<h6 id="无样式内容的闪烁"><a href="#无样式内容的闪烁" class="headerlink" title="无样式内容的闪烁"></a>无样式内容的闪烁</h6><p>在页面中，文档为样式使用了一个CSS规则，但是却在最后的底部，又引入了一个CSS资源，有进行了页面重绘，所以造成了页面无样式内容的闪烁。<br><a href="http://stevesouders.com/hpws/css-fouc.php" target="_blank" rel="external">DEMO.</a></p>
<h6 id="为什么造成这样"><a href="#为什么造成这样" class="headerlink" title="为什么造成这样"></a>为什么造成这样</h6><blockquote>
<p>如果样式表仍在加载，构建呈现树就是一种浪费，因为在所有样式表加载并解析完毕之前无需绘制任何东西。否则就会遇到无样式内容闪烁的问题。  —DavidHyatt.</p>
</blockquote>
<p>其实现在我们工作里，有进行页面加载进来后在利用JS进行位置重绘这样的问题，这样无形中就削弱了性能。</p>
<h5 id="几个DEMO测试"><a href="#几个DEMO测试" class="headerlink" title="几个DEMO测试"></a>几个DEMO测试</h5><p>可以对比一下放到底部和顶部的时间。<br>我这里其实相差不大的，甚至底部还要更快一些，但是白屏的时间让人体验太差了。<br><a href="http://stevesouders.com/hpws/css-bottom.php" target="_blank" rel="external">底部</a><br><a href="http://stevesouders.com/hpws/css-top.php" target="_blank" rel="external">顶部</a></p>
<h5 id="关于import引入"><a href="#关于import引入" class="headerlink" title="关于import引入"></a>关于import引入</h5><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import" target="_blank" rel="external">about import.</a></p>
<p>@import 必须放在所有其他规则之前。<br>可能会出现一些样式引入了但是却没有加载进来让人挠头的问题。<br>使用@import会让之组建下载的无序性，因为使用@import引用的文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。这种情况就类似于我刚说的，页面加载完后，利用JS去重绘样式，重绘位置。</p>
<h4 id="规则6-将脚本放在底部"><a href="#规则6-将脚本放在底部" class="headerlink" title="规则6:将脚本放在底部"></a>规则6:将脚本放在底部</h4><p>JS是一个很霸道的语言。JS运行当中，在解释器运行JS的时候，JS代码没完成之前，其他所有代码全部阻断。<br>在JS中有一个预处理过程，预处理完了才执行，预处理完了，JS代码从上到下的进行执行。这里涉及到一个变量提升的知识点。</p>
<p>文中尝试把JS放到中部，顶部，底部不同位置来测试产生的影响。</p>
<h5 id="放在中部"><a href="#放在中部" class="headerlink" title="放在中部"></a>放在中部</h5><p><a href="http://stevesouders.com/hpws/js-middle.php" target="_blank" rel="external">DMEO</a></p>
<p>下载JS代码需要10S左右的时间，页面上部分（脚本以上）代码立即显示出来了，而下部分要花大约10S才能显示出来，这段时间页面在加载脚本。</p>
<h5 id="逐步呈现-1"><a href="#逐步呈现-1" class="headerlink" title="逐步呈现"></a>逐步呈现</h5><p>使用脚本时，对于所有位于脚本以下的内容，逐步呈现都被阻塞。将脚本放在页面越靠下的地方，意味着更多的内容能够逐步地呈现。</p>
<h5 id="并行下载和脚本阻塞下载"><a href="#并行下载和脚本阻塞下载" class="headerlink" title="并行下载和脚本阻塞下载"></a>并行下载和脚本阻塞下载</h5><p>并行下载意味着我们可以下载更多的组件（取决于你的宽带和CPU速度），但是下载脚本时并行下载还是被禁用了。一部分原因是因为可能你的JS代码有类似document.write的操作，另一个原因为了保证JS脚本是按特定顺序来加载到浏览器中的。（js代码中的互相依赖。）</p>
<p>文中还提到了defer 延时加载，但是在Firfox中延迟脚本也会阻塞呈现和并行加载。<br>关于defer 和async 多说两句，个人建议不要使用，就打defer而言，官方说HTML中脚本是按顺序执行，但是你可以尝试一下，在页面上使用defer 引入两个相关联的JS脚本， 第一个JS比第二个JS要大，有可能会导致顺序的错乱。</p>
<h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><p><a href="http://stevesouders.com/hpws/js-top.php" target="_blank" rel="external">顶部DEMO</a><br><a href="http://stevesouders.com/hpws/js-bottom.php" target="_blank" rel="external">底部DEMO</a></p>
<h4 id="规则7-避免CSS表达式"><a href="#规则7-避免CSS表达式" class="headerlink" title="规则7:避免CSS表达式"></a>规则7:避免CSS表达式</h4><p>CSS表达式，你用过吗？<br>CSS表达式是CSS属性由JS来进行设定的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-color:expression(newDate().getHours()%2?&quot;#ccc&quot;:&quot;#fff&quot;);</div></pre></td></tr></table></figure></p>
<p>这里用expression方法来接受了一个JS表达式，CSS的属性被设置成为对JS表达式值得结果。</p>
<h5 id="更新的频率过于频繁"><a href="#更新的频率过于频繁" class="headerlink" title="更新的频率过于频繁"></a>更新的频率过于频繁</h5><p>CSS表达式的问题在于页面对其进行的操作频率非常高，当页面滚动甚至鼠标滑动时都要运行求职。影响了JS性能。</p>
<h5 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h5><p>解决该问题方式基本都使用JS来完成操作，文中还介绍了可以创建一次性表达来进行替换。</p>
<p>简单介绍一下一次性表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line"> p&#123;</div><div class="line">	 background-color:expression(BgColor(this))</div><div class="line"> &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">function BgColor(elem)&#123;</div><div class="line">	elem.style.backgroundColor =(new Date()).getHours()%2?&quot;#ccc&quot;:&quot;#fff&quot;;</div><div class="line">&#125;	</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>CSS表达式调用了BgColor函数，该函数设定了一个明确的值，并且移除了CSS表达式。<br>我感觉这就是一种隐性的替换。还不如直接就用JS来操作。<br>不过多琢磨几下，你们觉得用一次性表达式和用JS来渲染 那个对页面性能更友好呢？</p>
<h4 id="规则8：使用外部Js和Css"><a href="#规则8：使用外部Js和Css" class="headerlink" title="规则8：使用外部Js和Css"></a>规则8：使用外部Js和Css</h4><p>平常开发中，如果能复用的我基本单例放一个文件里，不能的就内联写到页面里。来看看书里是怎么讲的。<br>其实我以前觉得有点规模公司的网站，CSS，JS应该很规范，抱着学习的角度去看看，有的还不及我写的呢~哈哈~~</p>
<h5 id="内联VS-外置"><a href="#内联VS-外置" class="headerlink" title="内联VS 外置"></a>内联VS 外置</h5><p>来看看内联与外置的对比。</p>
<p><a href="http://stevesouders.com/hpws/inlined.php" target="_blank" rel="external">内联JS和CSS的示例.</a><br><a href="http://stevesouders.com/hpws/external.php" target="_blank" rel="external">外部JS和CSS的示例.</a></p>
<p>首次访问时，内联要快一些，二次访问浏览器加了缓存感觉2个速度相差不大。</p>
<p>书中也提到了内联比外部的快的原因因为需要承担多个HTTP请求，在第一条规则里已经提到了。</p>
<h5 id="页面浏览量"><a href="#页面浏览量" class="headerlink" title="页面浏览量"></a>页面浏览量</h5><p>用户访问的次数越少，内联的Js和Css更具优势。</p>
<h5 id="空缓存与完整缓存"><a href="#空缓存与完整缓存" class="headerlink" title="空缓存与完整缓存"></a>空缓存与完整缓存</h5><p>如果网站本质上能够为用户带来完整缓存率，使用外部文件的收益将更大。如果不大可能使用完整缓存，则内联是更好的选择。</p>
<h5 id="组件重用"><a href="#组件重用" class="headerlink" title="组件重用"></a>组件重用</h5><p>如果网站中使用了相同的样式和JS脚本，提高了组件的重用率。那么引入外部文件是一个更好的选择，因为用户在首页进行导航时，JS和CSS文件已经被缓存进来了。</p>
<h5 id="两全其美"><a href="#两全其美" class="headerlink" title="两全其美"></a>两全其美</h5><p>内联元素无法使用浏览器缓存，书里提供了两种方法，达到两全其美。</p>
<h6 id="加载后下载"><a href="#加载后下载" class="headerlink" title="加载后下载"></a>加载后下载</h6><p>主页画面作为浏览口进行”拉客”,加载后，通过JS方法俩下载其他页面需要的CSS,JS方法。</p>
<h6 id="动态内联"><a href="#动态内联" class="headerlink" title="动态内联"></a>动态内联</h6><p>如果主页服务器直到一个组件是否在浏览器的缓存中，就可以在内联和外部之间做出最佳的选择。<br>书中通过判断cookie值的存在来做对应的选择。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie ? 加载外部组件 : 内联</div></pre></td></tr></table></figure></p>
<p>我自己更倾向于第一种方式。</p>
<p><a href="http://stevesouders.com/hpws/post-onload.php" target="_blank" rel="external">加载后下载的demo</a></p>
<p><a href="http://stevesouders.com/hpws/dynamic-inlining.php" target="_blank" rel="external">动态内联demo</a></p>
<p>(未完待续)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于雅虎的14条军规。&lt;/p&gt;
&lt;p&gt;关于个人对前端性能优化的认识。&lt;/p&gt;
&lt;p&gt;主要记载学习笔记。&lt;/p&gt;
&lt;p&gt;读书也并不意味着照本宣科，大部分内容都是根据书中理解然后进行知识拓展，也多聊一聊自己对前端性能的理解，所以理解难免有错，如果有错误，希望不吝指正。&lt;br&gt;
    
    </summary>
    
    
      <category term="读书笔记 JavaScript" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>叮！你的XX云大礼包以上线 /(ㄒoㄒ)/~~</title>
    <link href="http://yoursite.com/2017/03/18/%E5%8F%AE%EF%BC%81%E4%BD%A0%E7%9A%84XX%E4%BA%91%E5%A4%A7%E7%A4%BC%E5%8C%85%E4%BB%A5%E4%B8%8A%E7%BA%BF-%E3%84%92o%E3%84%92/"/>
    <id>http://yoursite.com/2017/03/18/叮！你的XX云大礼包以上线-ㄒoㄒ/</id>
    <published>2017-03-18T03:09:22.000Z</published>
    <updated>2017-03-18T03:10:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980140368.jpg" alt="脸红"><br>昨天下午，我正溜溜撸码的时候，我后面同事突然喊我，<br>“能不能帮我下个资源。。。“<br>我意味深长的看了他一眼，<br>说了声“好”。<br><a id="more"></a><!--more--></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我同事在找了个云盘的资源，大文件下载必须安装云盘。<br>同事一脸怒气的安装了客户端。一副认命的表情。<br>安装完客户端，吐了一口浊气，选中资源，点击下载。<br>“80kb/s的速度，你要和我到天荒地老吗？”<br>一口老血喷到屏幕上。</p>
<h4 id="使用WireShark"><a href="#使用WireShark" class="headerlink" title="使用WireShark"></a>使用WireShark</h4><p>从你的浏览器中搜索<strong>wireShark</strong>下载。</p>
<p>我从公司装的是英文版，今天在自己本里下载是个中文版本的。</p>
<p>下载完输入过滤器 tcp  port http</p>
<p>如图<img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980463273.png" alt="选择过滤器"></p>
<p>然后选中你的网络链接。</p>
<p>接着，在你XX网盘选中任务 开始下载，打开我们的工具开始抓。</p>
<p>下载大约2-3秒就可以了。关闭下载，暂停抓包。</p>
<p>我第一次抓然没有抓到，这个工具我真的不怎么会用。</p>
<p>接着在抓，然后再protocol 协议列里找到HTTP，选中相关资源。找到了。</p>
<p>如图<img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980463394.png" alt="HTTP图"></p>
<p>然后选中它，进去<br><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980463312.png" alt="页面详细图"></p>
<p>选中请求的URI，浏览器中访问。</p>
<p>咦？我去，怎么个情况。怎么给我整个这个！！！！！<br><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980463337.png" alt="报错图"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;error_code&quot;:31045,&quot;error_msg&quot;:&quot;user not exists&quot;,&quot;request_id&quot;:1772649275372969519&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/bmiddle/6af89bc8gw1f8r9dxd3cnj20j60kmt9p.jpg" alt="崩溃"></p>
<p>用户不存在，昨天还好好的，今天你个骚货就改了是吧！</p>
<p>我当时的想法是访问时需要把cookie带上！</p>
<p><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980463394.png" alt="HTTP图"><br>还是在这，右键追踪流-&gt;TCP流。</p>
<p>我找到了一个整个访问的地址链。</p>
<p><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980463371.png" alt="地址"></p>
<p>搞它，浏览器中访问，搞定下载！</p>
<p><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/14898060167.png" alt="民歌"></p>
<p><strong>民歌，竟然是民歌。。</strong></p>
<p>最后，你的益达还给你<br><img src="http://ww3.sinaimg.cn/bmiddle/9150e4e5gw1fbg1yrtcu4j20mp0qoq46.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cgewx.img48.wal8.com/img48/565731_20170206100721/148980140368.jpg&quot; alt=&quot;脸红&quot;&gt;&lt;br&gt;昨天下午，我正溜溜撸码的时候，我后面同事突然喊我，&lt;br&gt;“能不能帮我下个资源。。。“&lt;br&gt;我意味深长的看了他一眼，&lt;br&gt;说了声“好”。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习 抓包" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0-%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记：高性能网站建设指南（1）</title>
    <link href="http://yoursite.com/2017/03/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/03/04/读书笔记——高性能网站建设指南/</id>
    <published>2017-03-04T15:55:25.000Z</published>
    <updated>2017-03-19T02:11:47.890Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/3230776-3d33665bf3a7deef.jpg" alt=""><br>图片来源于简书App<br><a id="more"></a><!--more--></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>关于雅虎的14条军规。</p>
<p>关于个人对前端性能优化的认识。</p>
<p>主要记载学习笔记。</p>
<p>读书也并不意味着照本宣科，大部分内容都是根据书中理解然后进行知识拓展，也多聊一聊自己对前端性能的理解，所以理解难免有错，如果有错误，希望不吝指正。</p>
<h4 id="绪言"><a href="#绪言" class="headerlink" title="绪言"></a>绪言</h4><h5 id="跟踪Web页面性能"><a href="#跟踪Web页面性能" class="headerlink" title="跟踪Web页面性能"></a>跟踪Web页面性能</h5><p>我们首次访问网站时，缓存是空的。浏览器会解析HTML文档并下载网站需要的组件。用户需要大部分的时间来等待组件的下载，还有小部分时间解析HTML，脚本以及样式表上面。</p>
<h5 id="性能黄金法则"><a href="#性能黄金法则" class="headerlink" title="性能黄金法则"></a>性能黄金法则</h5><p>我们访问页面时，只有10%-20%的最终用户的响应时间花在下载HTML文档上，其余的时间都是在下载页面所需的所有组件上。</p>
<blockquote>
<p>这么看来，怎么减少这80%-90%的时间，是我们很重要的任务。</p>
</blockquote>
<h4 id="规则一：减少HTTP请求"><a href="#规则一：减少HTTP请求" class="headerlink" title="规则一：减少HTTP请求"></a>规则一：减少HTTP请求</h4><p>随便打开一个门户网站，看看它们的网站都加载了多少的组件。<br>我记得最早的时候我写页面时，需要引入图片来做小图标，我把下载的图片都放入一个文件夹里，等用到那个时候就在需要引用的资源里引入这个图片。这样就增加了HTTP的请求。<br>书里对于我这种问题，提供了图片地图与雪碧图以及内联图片的解决方案。</p>
<h5 id="图片地图"><a href="#图片地图" class="headerlink" title="图片地图"></a>图片地图</h5><p>图片地图这种使用方法我是没用过的，我看了看代码，在定义图片地图上的位置坐标时，很容易出错，而且劳动力还很大，性价比不高。</p>
<p>官方提供的小例子，来对比使用该方法，和没有使用的时间对比。<br><a href="http://stevesouders.com/hpws/imagemap-no.php?t=1488611564046" target="_blank" rel="external">图片地图demo。</a><br>我尝试了几次，在排除浏览器缓存的情况下，图片地图的响应时间还是优于没有使用的。在有缓存的情况下访问时间还是相差不多的。<br>我用浏览器在不同的网络环境测试了一下 3G（good）网络下，使用图片地图明显优于没有使用的。<br>可见在移动端，我们使用方法来解决问题还是很有必要的。</p>
<h5 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h5><p>CSS雪碧图，这个方法大部分都还使用这种方法来解决问题。<br>将多个图片组合成一张图片，在页面中通过background-position来引用图片的偏移量。<br>我觉得种这方法使用起来还是优于图片地图的，最起码我觉得使用起来更方便。</p>
<p>我试了几次，和图片地图比起来，响应时间略微也是有一点优势的。<br><a href="http://stevesouders.com/hpws/sprites.php?t=1488612433846" target="_blank" rel="external">雪碧图demo</a></p>
<h5 id="内联图片"><a href="#内联图片" class="headerlink" title="内联图片"></a>内联图片</h5><p>很多网站也在用这种方法了，我也在用，如果你不知道这种方法的话，我猜你肯定看过 src=”data:imgage/gif;base64…”一长串的图片资源吧，我第一次看到时，感觉这个URL怎么这么长，然后就特意去查了一下。<br>我通常用这种方法和HTML5的localstorage联合起来，把不经常换的图片直接储存来客户端，下次访问时忽略加载时间。我曾经也听人说过使用这种方法在存图片时也比较方便。</p>
<p>我也看到书中介绍文件被缓存时有意外的收获。</p>
<p>补一个小知识点：关于浏览器加载CSS时，CSS的大小对页面性能是有影响的，也就是说在样式表里不建议这么写。<br>在这里我举个小例子，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">margin：20px</div></pre></td></tr></table></figure></p>
<p>其实Chrome在解析CSS时，会把margin:20px这个属性拆成4个属性的，但是为了减少CSS里的样式大小，但最后还是建议这么写。<br>所以可见CSS文件的大小还是对页面性能有及其重要的影响的。</p>
<p><a href="http://stevesouders.com/hpws/inline-images.php?t=1488612889314" target="_blank" rel="external">内联图片demo</a></p>
<h5 id="合并脚本和样式表"><a href="#合并脚本和样式表" class="headerlink" title="合并脚本和样式表"></a>合并脚本和样式表</h5><p>我们在学习工作中，经常会用到各种插件，各种样式表。<br>然后再页面中引入多个脚本插件，有自己写的，也有外部引入的。至少我记得我以前这样过的。<br>军规中阐述将这些单独的文件合并到一个文件中，可以减少HTTP请求数量并缩短最终的响应时间。<br>看了这个demo对比真的能感受到合并脚本和样式表的必要性。<br><a href="http://stevesouders.com/hpws/combo.php" target="_blank" rel="external">合并脚本和样式表demo</a></p>
<p>现在webpack这么流行，解决这种问题真是让人舒服。</p>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>这是军规的第一条，同时作者认为这是最重要的规则，因为遵守该规则可以同时改善首次浏览和后续浏览的网站响应时间。而首次访问页面时的响应时间决定着用户是放弃你的网站还是不停地进行回访。</p>
<h4 id="规则二：使用内容发布网络"><a href="#规则二：使用内容发布网络" class="headerlink" title="规则二：使用内容发布网络"></a>规则二：使用内容发布网络</h4><h5 id="使用CDN（Content-Delivery-Network）。"><a href="#使用CDN（Content-Delivery-Network）。" class="headerlink" title="使用CDN（Content Delivery Network）。"></a>使用CDN（Content Delivery Network）。</h5><p>CDN用于发布静态内容（图片，样式表，脚本，Flash。）<br>优势：缩短响应时间，缓和Web流量峰值的压力。<br>缺点：你的响应时间可能受到其他网站的影响。CDN服务提供商在其所有的客户之间共享Web服务器组。无法控制组件服务器所带来的特殊麻烦（修改HTTP响应头.）</p>
<p>书里给了2个demo就不贴地址了，demo里的CDN都是国外的，小伙伴们可以自己找免费的CDN测试一下。</p>
<p>但不要在本地测试（笑哭）。</p>
<h4 id="规则三-添加Expires头"><a href="#规则三-添加Expires头" class="headerlink" title="规则三: 添加Expires头"></a>规则三: 添加Expires头</h4><p>我记得去年，去一个网站查东西，那个网站首页有一张挺大的图，我当时特意看了看响应时间，3S左右，搞的每次访问体验都不好。我想就是缓存没搞，最起码把图片压一压啊，这么大就仍上来。。。</p>
<p>在这条规则里，介绍了Expires头。<br>浏览器使用缓存来减少HTTP的请求数量，来减小HTTP的响应大小，从而提升访问速度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Expires:Mon ,15 Apr 2024 20:00:00 GMT</div></pre></td></tr></table></figure></p>
<p>如果一张图片返回了这个头，那么代表在这个时间内，浏览器会再后续的页面浏览中一直使用这张图片。</p>
<p>同时Expires也有一个的限制，它要求服务器和客户端的始终必须严格同步。</p>
<p>当然还有另外一种选择，HTTP1.1可以通过引入Cache-Control头使用max-age指令来指定组件应该缓存多久。<br>对于不支持HTTP1.1的浏览器可以通过mod_expirseApache模块可以让Expires可以像max-age一样来设置相对的缓存时间。</p>
<p>如果这两个指令同时出现，HTTP规定max-age指令将重写Expires头。</p>
<p>像我访问的那个网站，完全可以把图片放入缓存头里嘛，让用户多次访问时减少访问时间。<br>在这里补充一句，只有在用户已经访问过你的网站之后，长久的Expires头才会对页面浏览产生影响。</p>
<p>缓存的文件不限于图片，包括样式表，脚本都可以尽可能的缓存。</p>
<p>书的作者对美国的十大网站进行了调查：</p>
<p>5个网站使其大部分<b>图片</b>可缓存30天以上。<br>4个网站使其大部分<b>样式表</b>可缓存30天以上。<br>5个网站使其大部分<b>脚本</b>可缓存30天以上。</p>
<h5 id="修订文件名"><a href="#修订文件名" class="headerlink" title="修订文件名"></a>修订文件名</h5><p>如过我们将组件配置为让浏览器代理缓存，我们又需要新的样式了？怎么办呢？<br>这个我想即使没设置缓存的同学也遇到过吧，微信浏览器~~。<br>最简单的方法就是改文件名的版本号了。</p>
<h4 id="规则四：压缩组件"><a href="#规则四：压缩组件" class="headerlink" title="规则四：压缩组件"></a>规则四：压缩组件</h4><p>从规则名就能想象出来我们需要干什么,压缩组件不就是为了减少数据传输的大小，从而提升前端性能吗。</p>
<p>文中提到两种压缩格式gzip和deflate。推荐gzip的压缩格式。一：浏览器普遍支持；二：压缩效果相对更卓越。</p>
<p>不过我刚才乱看时，又发现了个SDCH，然后科普了一下，粘过来：</p>
<p>sdch是Shared Dictionary Compression over HTTP的缩写，即通过字典压缩算法对各个页面中相同的内容进行压缩，减少相同的内容的传输。如：一个网站中一般都是共同的头部和尾部，甚至一些侧边栏也是共同的。之前的方式每个页面打开的时候这些共同的信息都要重新加载，但使用SDCH压缩方式的话，那些共同的内容只用传输一次就可以了。</p>
<p>sdch主要分为3个部分：首次请求，下载字典，之后的请求。</p>
<p><img src="http://cgewx.img48.wal8.com/img48/565731_20170206100721/148907101885.png" alt=""></p>
<p>gzip压缩是什么？<br>先把文件在服务器就行压缩，然后再进行传输文件，传输完毕后，浏览器会对文件进行解压缩。</p>
<p>文中主要讲述了配置方面，以及性能方面的对比，美国十大流行的网站使用情况。<br>放几个官方压缩的实例。</p>
<p><a href="http://stevesouders.com/hpws/nogzip.html?t=1489069735368" target="_blank" rel="external">无压缩的实例.</a></p>
<p><a href="http://stevesouders.com/hpws/gzip-html.html?t=1489069798549" target="_blank" rel="external">压缩HTML的实例</a></p>
<p><a href="http://stevesouders.com/hpws/gzip-all.html?t=1489069868505" target="_blank" rel="external">压缩所有组件的实例</a></p>
<p>对比很明显，不是么？</p>
<p>（未完待续）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3230776-3d33665bf3a7deef.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;图片来源于简书App&lt;br&gt;
    
    </summary>
    
    
      <category term="读书笔记 JavaScript" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue的初体验</title>
    <link href="http://yoursite.com/2017/03/01/Vue%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2017/03/01/Vue的初体验/</id>
    <published>2017-03-01T12:19:15.000Z</published>
    <updated>2017-03-01T12:29:18.509Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1914339-d5dc17a1a0ae1968.jpg" alt="alt text"><br>这并不是一篇关于Vue教程文，我只是大体的说了一下我使用Vue的流程并做了一下梳理，以及自己乱七八糟的想法。<br>我对Vue理解的也不是很深，也是在摸索中了解阶段。<br><a id="more"></a><!--more--></p>
<h4 id="阵前"><a href="#阵前" class="headerlink" title="阵前"></a>阵前</h4><p>年后一直在满足上面提古怪的需求项目。（笑哭）<br>为什么说古怪？因为做完了，然后又被做掉了。（无奈）<br>好啦，为了检验Vue的储备成果，准备抽空把以前写的一个小模块，用Vue重构一遍。    </p>
<h4 id="阵中"><a href="#阵中" class="headerlink" title="阵中"></a>阵中</h4><p>这并不是一篇Vue教程文，我只是大体的说了一下我使用Vue的流程并做了一下梳理，以及自己乱七八糟的想法。<br>我对Vue理解的也不是很深，也是在摸索中了解阶段。<br>如果说的不对，欢迎指正，共同进步。<br>如果想看教程文，掘金社区有很多分享文章，你可以作为知识储备，慕课网也有几个关于Vue入门的视屏，有兴趣可以去看看，应该也是最近更新的。</p>
<h5 id="阵前准备"><a href="#阵前准备" class="headerlink" title="阵前准备"></a>阵前准备</h5><p>webpack   vue-cli  vue   vue-resource  vue-router</p>
<p>这里没有使用vuex，掌握的不是很清晰，我想下一个demo会把vuex加入进来。</p>
<p>在这里尤大推荐用axios，我也没有使用，项目模块里只是简单的去跨域读取数据，使用方法应该很类似。<br>为什么官方不推荐使用 vue resource了。这是原话：</p>
<blockquote>
<p>最近团队讨论了一下，Ajax 本身跟 Vue 并没有什么需要特别整合的地方，使用 fetch polyfill 或是 axios、superagent 等等都可以起到同等的效果，vue-resource 提供的价值和其维护成本相比并不划算，所以决定在不久以后取消对 vue-resource 的官方推荐。已有的用户可以继续使用，但以后不再把 vue-resource 作为官方的 ajax 方案。这里可以去掉 vue-resource，文档也不必翻译了。</p>
</blockquote>
<p>看成色可能是性价比没有axios高。</p>
<h5 id="扬马策鞭"><a href="#扬马策鞭" class="headerlink" title="扬马策鞭"></a>扬马策鞭</h5><p>使用脚手架创建项目后<br>npm install<br>在运行项目后，就来了敌人<br>我没有截图，我记得是找不到模块chalk。<br>从网上查了一下，自己分析可能是网速问题也可能是 npm 版本低导致的。<br>我从新又install，然后成功运行了。</p>
<p>因为有以前写的代码，还有调用方法。我需要做的只是把代码结构用vue重构一遍，而且还只是其中的一个模块。<br>以前也有vue的知识储备，进展还算顺利，2个小时就完成。</p>
<p>使用的是weui的css样式。<br>我直接在index页面引入CDN了，我想引入CDN比在自己模块中加载速度更快一些。</p>
<p>接下来就是在main.js页面里 引入各种组件了</p>
<p>引入 vue-resource，vue-router 还有自定义的css样式组件，以及组成页面的vue组件。<br>然后在这里定义路由，定义路径，定义匹配的路径，因为使用编程式导航，还要定义一个描述地址的对象,就像这样</p>
<pre><code>{
       path: &apos;/details&apos;,
       component: details,
       name: &apos;details&apos;
}
</code></pre><p>接着就在组件里写逻辑代码了<br>大体就是<br>传数，接数，跨域查询，展现数据。<br>balabala~<br>~~~<br>多余的逻辑代码我就不罗嗦了<br>就说说跨域这点</p>
<p>我后端用的PHP，通过条件返回的JSON。<br>在项目里，以前跨域都使用jsonp的，这次使用了CORS<br>目前所有浏览器都支持，IE不能低于IE10。<br>与JSONP相比，JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。<br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">了解更多CORS。</a></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>代码编译完以后，和以前的代码相比做了性能测试，移动端 使用3G(GOOD)网络做了对比（660ms）-（1s），感觉蛮不错的。</p>
<p>本来我还写了一个loading组件，但是引入以后反倒慢了(凌乱)。</p>
<p>我想应该是DOM重构时花费的时间吧（不确定）。</p>
<p>单页应用减少了HTTP请求，使用webpack 压缩了组件，也减少了对外部的引用。性能自然而然有所提升。</p>
<p>webpack也是个好东西，但我只会一些基本的应用，如果运用得当我想性能还会提升。<br>vue-cli也是让我这么方便的使用vue<br>感谢你们。</p>
<p>以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1914339-d5dc17a1a0ae1968.jpg&quot; alt=&quot;alt text&quot;&gt;&lt;br&gt;这并不是一篇关于Vue教程文，我只是大体的说了一下我使用Vue的流程并做了一下梳理，以及自己乱七八糟的想法。&lt;br&gt;我对Vue理解的也不是很深，也是在摸索中了解阶段。&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-router2.0基础</title>
    <link href="http://yoursite.com/2017/01/22/vue-router2-0%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/01/22/vue-router2-0基础/</id>
    <published>2017-01-22T07:23:51.000Z</published>
    <updated>2017-02-14T12:41:21.228Z</updated>
    
    <content type="html"><![CDATA[<p>最近在踩vue的坑,这篇是关于vue-router基础的~~<br>不过说实在的,也是再重复造轮子,vue-router官方的手册已经很全面了.<br><a id="more"></a><!--more--></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>用Vue+vue-router 很方便的就能构建单页应用，依靠vue-router把各个组件联系在一起。</p>
<h4 id="最基础的vue-router用法"><a href="#最基础的vue-router用法" class="headerlink" title="最基础的vue-router用法"></a>最基础的vue-router用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;h1&gt;hello world!&lt;/h1&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;!--它默认会被渲染成一个带有链接的a标签，通过to属性指定链接地址--&gt;</div><div class="line">            &lt;router-link to=&quot;/foo&quot;&gt;Go to foo&lt;/router-link&gt;</div><div class="line">            &lt;router-link to=&quot;/bar&quot;&gt;Go to bar&lt;/router-link&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div style=&quot;color: darkcyan;&quot;&gt;</div><div class="line">            &lt;!-- 用于渲染匹配的组件。--&gt;</div><div class="line">            &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;script&gt;</div><div class="line">        /*定义组件*/</div><div class="line">        const Foo = &#123;</div><div class="line">            template: &apos;&lt;div&gt;foo template!&lt;/div&gt;&apos;</div><div class="line">        &#125;</div><div class="line">        const Bar = &#123;</div><div class="line">                template: &apos;&lt;div&gt;Bar template!&lt;/div&gt;&apos;</div><div class="line">            &#125;</div><div class="line">            //绑定组件到路由，设置路径</div><div class="line">        const routes = [&#123;</div><div class="line">                path: &apos;/foo&apos;,</div><div class="line">                component: Foo</div><div class="line">            &#125;, &#123;</div><div class="line">                path: &apos;/bar&apos;,</div><div class="line">                component: Bar</div><div class="line">            &#125;]</div><div class="line">            //创建路由实例</div><div class="line">        const router = new VueRouter(&#123;</div><div class="line">                routes: routes</div><div class="line">            &#125;)</div><div class="line">            //挂载根实例</div><div class="line">        const app = new Vue(&#123;</div><div class="line">            router</div><div class="line">        &#125;).$mount(&apos;#app&apos;)</div><div class="line">    &lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;router-link&gt;</code> 是一个组件，它默认会被渲染成一个带有链接的<code>a</code>标签，通过to属性指定链接地址。当点击对应路由的链接时，为该链接自动添加<code>router-link-active</code>样式<br>来看看它的属性值，</p>
<h5 id="to"><a href="#to" class="headerlink" title="to"></a>to</h5><p>表示目标路由的链接。这是一个必须的属性值，当被点击后，跳转到对应的目标对象。</p>
<h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><p>布尔类型，默认值为false.设置replace，点击后，导航不会留下history记录。从路径上相当于无痕浏览吧，在浏览器内点击返回时，没有返回目标。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=&quot;/foo&quot; replace&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure>
<h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><p>布尔类型，默认值为false。路径叠加。从路径a跳转到路径b，如果配置了append，路径变成 /a/b, 相反，路径为/b。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=&quot;/foo&quot; append&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure></p>
<h5 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h5><p>字符串类型，看名字就知道是渲染的标签嘛，如果不配置tag属性，则默认渲染为<code>a</code>标签，<br>否则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=&quot;/foo&quot;  tag=&quot;li&quot;&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure></p>
<p>将渲染为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>
<h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><p>使用动态路径参数来映射不同的参数。我理解就是不同的人持着自己的身份ID证件访问同一个组件，来获得属于自己的身份ID。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;动态匹配路由&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;h1&gt;hello world!&lt;/h1&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;router-link to=&quot;/user/foo/post/111&quot;&gt;Go to foo&lt;/router-link&gt;</div><div class="line">            &lt;router-link to=&quot;/user/bar/post/222&quot;&gt;Go to bar&lt;/router-link&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div style=&quot;color: darkcyan;&quot;&gt;</div><div class="line">            &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;script&gt;</div><div class="line">        /*定义组件*/</div><div class="line">        const User = &#123;</div><div class="line">                template: &apos;&lt;div&gt;User&#123;&#123;$route.params.id&#125;&#125;,post&#123;&#123;$route.params.postid&#125;&#125;&lt;/div&gt;&apos;,</div><div class="line">            &#125;</div><div class="line">            //绑定组件到路由，设置路径</div><div class="line"></div><div class="line">        const routes = [&#123;</div><div class="line">            path: &apos;/user/:id/post/:postid&apos;,</div><div class="line">            component: User</div><div class="line">        &#125;]</div><div class="line"></div><div class="line">        const router = new VueRouter(&#123;</div><div class="line">            routes</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        const app = new Vue(&#123;</div><div class="line">            router</div><div class="line">        &#125;).$mount(&apos;#app&apos;)</div><div class="line">    &lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>动态的路径属性，以<code>：</code>标记。当路由被匹配时，参数值设置到<code>this.$route.params</code>，可以在组件内使用。<br>在项目里，路由可设置多个路径参数，对应的值都会设置到$route.params中。还可以自定义匹配正则。<br><a href="https://github.com/vuejs/vue-router/blob/next/examples/route-matching/app.js" target="_blank" rel="external">这里有个例子怎么匹配正则。</a></p>
<h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>我觉得就是一个路由下，子路由页面之间的切换。<br>定义路由的这个路径我老是写错，浏览器也不报错，很是郁闷。我记得前些日子写Vue单页demo的时候，第一次正常访问的时候，从父组件里点子路由组件，可以访问子路由页面，在不刷新页面的情况下，再次点击的时候，子路由页面怎么也渲染不出来。现在估计就是路径写错了吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;嵌套路由&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;router-link to=&quot;/user/foo&quot;&gt;foo&lt;/router-link&gt;</div><div class="line">        &lt;router-link to=&quot;/user/foo/profile&quot;&gt;profile&lt;/router-link&gt;</div><div class="line">        &lt;router-link to=&quot;/user/foo/posts&quot;&gt;posts&lt;/router-link&gt;</div><div class="line">        &lt;hr&gt;</div><div class="line">        &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        const User = &#123;</div><div class="line">            template: `     &lt;div class=&quot;user&quot;&gt;       &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;       &lt;router-view&gt;&lt;/router-view&gt;     &lt;/div&gt;   `</div><div class="line">        &#125;</div><div class="line">        const home = &#123;</div><div class="line">            template: &apos;&lt;div&gt;Home&lt;/div&gt;&apos;</div><div class="line">        &#125;</div><div class="line">        const profile = &#123;</div><div class="line">            template: &apos;&lt;div&gt;Profile&lt;/div&gt;&apos;</div><div class="line">        &#125;</div><div class="line">        const posts = &#123;</div><div class="line">            template: &apos;&lt;div&gt;Posts&lt;/div&gt;&apos;</div><div class="line">        &#125;</div><div class="line">        const routes = [&#123;</div><div class="line">            path: &apos;/user/:id&apos;,</div><div class="line">            component: User,</div><div class="line">            children: [&#123;</div><div class="line">                path: &apos;&apos;,</div><div class="line">                component: home</div><div class="line">            &#125;, &#123;</div><div class="line">                path: &apos;profile&apos;,</div><div class="line">                component: profile</div><div class="line">            &#125;, &#123;</div><div class="line">                path: &apos;posts&apos;,</div><div class="line">                component: posts</div><div class="line">            &#125;]</div><div class="line">        &#125;]</div><div class="line"></div><div class="line">        const router = new VueRouter(&#123;</div><div class="line">            routes</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        const app = new Vue(&#123;</div><div class="line">            router</div><div class="line">        &#125;).$mount(&apos;#app&apos;)</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="编程试导航"><a href="#编程试导航" class="headerlink" title="编程试导航"></a>编程试导航</h4><p>类似于window.history的用法<br><code>router.go()</code><br><code>router.push()</code>，它就是用来导航到不同的链接，等同于<code>&lt;router-link to=&quot;&quot;&gt;&lt;/router-link&gt;</code>。<br>方法的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">router.push(&apos;home&apos;)</div><div class="line">router.push(&#123;path:&apos;home&apos;&#125;)</div><div class="line">router.push(&#123;name:&apos;user&apos;,params:&#123;userId:aa&#125;&#125;)</div><div class="line">//带参数的路由，/register?plan=private</div><div class="line">router.push(&#123;path:&apos;register&apos;,query:&#123;plan:&apos;private&apos;&#125;&#125;)</div></pre></td></tr></table></figure></p>
<p>补充一下编程试导航<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">          query() &#123;</div><div class="line">              if (!this.number &amp;&amp; !this.name) &#123;</div><div class="line">                  alert(&quot;必须输入一个条件！&quot;)</div><div class="line">              &#125; else &#123;</div><div class="line">                  this.$router.push(&#123;</div><div class="line">                      name: &apos;Two&apos;,</div><div class="line">                      params: &#123;</div><div class="line">                          number: this.number,</div><div class="line">                          name: this.name</div><div class="line">                      &#125;</div><div class="line">                  &#125;)</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>通过这个，页面跳转到Two页面后，Url是不带参数的，一开始我以为类似于get方法，参数在外面。（不排除在该方法内可以把参数暴露的方法）<br>name：Tow，这个Two必须在路由里，把名称标记上，我第一次时忘了，我记得报错信息是没有找到Tow这个路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    path: &apos;/two&apos;,</div><div class="line">    component: Two,</div><div class="line">    name: &apos;Two&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于怎么在跳转的页面里接受参数，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">      name: &apos;com2&apos;,</div><div class="line">      data() &#123;</div><div class="line">          return &#123;</div><div class="line">              loading: false,</div><div class="line">              post: null,</div><div class="line">              error: null,</div><div class="line">              name: &apos;&apos;,</div><div class="line">              number: &apos;&apos;</div><div class="line">          &#125;</div><div class="line">      &#125;,</div><div class="line">      created() &#123;</div><div class="line">          // 组件创建完后获取数据，</div><div class="line">          // 此时 data 已经被 observed 了</div><div class="line">          this.fetchData()</div><div class="line">      &#125;,</div><div class="line">      watch: &#123;</div><div class="line">          // 如果路由有变化，会再次执行该方法</div><div class="line">          &apos;$route&apos;: &apos;fetchData&apos;</div><div class="line">      &#125;,</div><div class="line">      methods: &#123;</div><div class="line">          fetchData() &#123;</div><div class="line">		//获得参数</div><div class="line">              this.name = this.$route.params.name;</div><div class="line">              this.number = this.$route.params.number;</div><div class="line"></div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="命名试图"><a href="#命名试图" class="headerlink" title="命名试图"></a>命名试图</h4><p>一个页面下，展示多个同级的组件。这样增加了组件的灵活性和复用性。<br>需要注意的是需要在定义router-view的时候给它定义身份标示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-view name=&quot;footer&quot;&gt;&lt;/router-view&gt;</div></pre></td></tr></table></figure></p>
<p>footer就是他的身份标示。如果name为空，则为default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const routes = [&#123;</div><div class="line">	path:&apos;/user&apos;,</div><div class="line">	componetns:&#123;</div><div class="line">		default:main,</div><div class="line">		b:footer</div><div class="line"> &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure></p>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>顾名思义，重定向就是我们访问页面a的时候，定向访问到了b页面。重定向的目标可以是路径，可以是个命名的路由，也可以是个方法。<a href="https://github.com/vuejs/vue-router/blob/next/examples/redirect/app.js" target="_blank" rel="external">可以参考这里。</a></p>
<h4 id="02-04补"><a href="#02-04补" class="headerlink" title="02-04补"></a>02-04补</h4><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="http://router.vuejs.org/zh-cn/" target="_blank" rel="external">参考文档。</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在踩vue的坑,这篇是关于vue-router基础的~~&lt;br&gt;不过说实在的,也是再重复造轮子,vue-router官方的手册已经很全面了.&lt;br&gt;
    
    </summary>
    
    
      <category term="vue vue-router" scheme="http://yoursite.com/tags/vue-vue-router/"/>
    
  </entry>
  
  <entry>
    <title>分享一波面试题</title>
    <link href="http://yoursite.com/2016/12/26/%E5%88%86%E4%BA%AB%E4%B8%80%E6%B3%A2%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2016/12/26/分享一波面试题/</id>
    <published>2016-12-26T08:44:06.000Z</published>
    <updated>2017-01-29T03:42:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://az619519.vo.msecnd.net/files/ElmiraTreeFarm_EN-US8943841460_1366x768.jpg" alt="alt text"><br>图片来源：必应图库<br><a id="more"></a><!--more--></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>内容都是东拼西凑的。我把格式调整一下，易于阅读。有的内容也更改了一下，更易于理解。<br>同时部分内容也许会有错误，我发现会及时更改。如果你有更好的解决方案你可以通过邮件和我一起探讨。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="HTML-CSS部分"><a href="#HTML-CSS部分" class="headerlink" title="HTML+CSS部分"></a>HTML+CSS部分</h4><h5 id="1-行内元素和块级元素-img算什么-行内元素怎么转化为块级元素"><a href="#1-行内元素和块级元素-img算什么-行内元素怎么转化为块级元素" class="headerlink" title="1.行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?"></a>1.行内元素和块级元素?img算什么?行内元素怎么转化为块级元素?</h5><p>行内元素：和有他元素都在一行上，高度、行高及外边距和内边距都不可改变，文字图片的宽度不可改变，只能容纳文本或者其他行内元素；其中img是行元素<br>块级元素：总是在新行上开始，高度、行高及外边距和内边距都可控制，可以容纳内敛元素和其他元素；<br>行元素转换为块级元素方式：display：block；</p>
<h5 id="2-将多个元素设置为同一行-清除浮动有几种方式"><a href="#2-将多个元素设置为同一行-清除浮动有几种方式" class="headerlink" title="2.将多个元素设置为同一行?清除浮动有几种方式?"></a>2.将多个元素设置为同一行?清除浮动有几种方式?</h5><p>将多个元素设置为同一行：float，inline-block<br>清除浮动的方式：<br>方法一：添加新的元素 、应用 clear：both；<br>方法二：父级div定义 overflow: hidden；<br>方法三：利用:after和:before来在元素内部插入两个元素块，从面达到清除浮动的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.clear&#123;zoom:1;&#125;</div><div class="line">.clear:after&#123;content:&quot;&quot;;clear:both;display:block;height:0;overflow:hidden;visibility:hidden;&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>我记得慕课网有关于张鑫旭大神的系列视频，感兴趣可以去看看。</p>
</blockquote>
<h5 id="3-怪异盒模型box-sizing？弹性盒模型-盒布局"><a href="#3-怪异盒模型box-sizing？弹性盒模型-盒布局" class="headerlink" title="3.怪异盒模型box-sizing？弹性盒模型|盒布局?"></a>3.怪异盒模型box-sizing？弹性盒模型|盒布局?</h5><p>在标准模式下，一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)<br>在怪异模式下，一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）<br>当设置为box-sizing:content-box时，将采用标准模式解析计算；<br>当设置为box-sizing:border-box时，将采用怪异模式解析计算。<br>产生的原因？<br>当不对doctype进行定义时，会触发怪异模式。</p>
<blockquote>
<p>概念模糊的同学，去网上更详细了解一下。</p>
</blockquote>
<h5 id="4-简述几个css-hack"><a href="#4-简述几个css-hack" class="headerlink" title="4.简述几个css hack?"></a>4.简述几个css hack?</h5><h6 id="1）图片间隙"><a href="#1）图片间隙" class="headerlink" title="1）图片间隙"></a>1）图片间隙</h6><p>在div中插入图片，图片会将div下方撑大3px。<br>hack1：将div与img写在同一行。<br>hack2：给img添加display：block；<br>dt  li 中的图片间隙。<br>hack：给img添加display：block；</p>
<h6 id="2）默认高度，IE6以下版本中，部分块元素，拥有默认高度（低于18px）"><a href="#2）默认高度，IE6以下版本中，部分块元素，拥有默认高度（低于18px）" class="headerlink" title="2）默认高度，IE6以下版本中，部分块元素，拥有默认高度（低于18px）"></a>2）默认高度，IE6以下版本中，部分块元素，拥有默认高度（低于18px）</h6><p>hack1：给元素添加：font-size：0；<br>hack2：声明：overflow：hidden；<br>表单行高不一致<br>hack：给表单添加声明：float：left；height： ；border： 0；<br>鼠标指针<br>hack：若统一某一元素鼠标指针为手型：cursor：pointer；<br>当li内的a转化块元素时，给a设置float，IE里面会出现阶梯状<br>hack1：给a加display：inline-block；<br>hack2：给li加float：left；</p>
<blockquote>
<p>测试时注意Jquery的height属性是不计算border和padding的。</p>
</blockquote>
<h5 id="5-link-import两者之间区别"><a href="#5-link-import两者之间区别" class="headerlink" title="5.link import两者之间区别?"></a>5.link import两者之间区别?</h5><p>1) link属于html标签，而@import是css提供的。<br>2) 页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。<br>3) link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。<br>4) link方式样式的权重高于@import的。</p>
<h5 id="6-href和src区别-title和alt"><a href="#6-href和src区别-title和alt" class="headerlink" title="6.href和src区别?title和alt?"></a>6.href和src区别?title和alt?</h5><p>href (Hypertext Reference)指定网络资源的位置（超文本引用），从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系，在 link和a 等元素上使用。<br> src (Source)属性仅仅嵌入当前资源到当前文档元素定义的位置，是页面必不可少的一部分，是引入。在 img、script、iframe 等元素上使用。<br> title：既是html标签，又是html属性，title作为属性时，用来为元素提供额外说明信息.<br> alt：alt是html标签的属性，alt属性则是用来指定替换文字，只能用在img、area和input元素中（包括applet元素），用于网页中图片无法正常显示时给用户提供文字说明使其了解图像信息.</p>
<h5 id="7-transform？animation？区别-animation-duration"><a href="#7-transform？animation？区别-animation-duration" class="headerlink" title="7.transform？animation？区别?animation-duration?"></a>7.transform？animation？区别?animation-duration?</h5><p>Transform:它和width、left一样，定义了元素很多静态样式实现变形、旋转、缩放、移位及透视等功能，通过一系列功能的组合我们可以实现很炫酷的静态效果（非动画)。<br>Animation:作用于元素本身而不是样式属性,属于关键帧动画的范畴，它本身被用来替代一些纯粹表现的javascript代码而实现动画,可以通过keyframe显式控制当前帧的属性值.<br>animation-duration：规定完成动画所花费的时间周期，以秒或毫秒计。</p>
<h5 id="8-nth-of-type-nth-child"><a href="#8-nth-of-type-nth-child" class="headerlink" title="8.nth-of-type | nth-child?"></a>8.nth-of-type | nth-child?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&lt;p&gt;111&lt;/p&gt;</div><div class="line">&lt;span&gt;222&lt;span&gt;</div><div class="line">&lt;li&gt;1&lt;/li&gt;</div><div class="line">&lt;li&gt;2&lt;/li&gt;</div><div class="line">&lt;li&gt;3&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">li:nth-of-type(2):表示ul下的第二个li元素 </div><div class="line">li:nth-child(2)：表示既是li元素又是在ul下的第二个元素（找不到）。</div></pre></td></tr></table></figure>
<p>建议一般使用nth-of-type，不容易出问题。</p>
<blockquote>
<p>这个确实，我记得我以前还遇到过这个问题，嘿嘿，你呢？</p>
</blockquote>
<h5 id="9-before-和-before-区别"><a href="#9-before-和-before-区别" class="headerlink" title="9. :before 和 ::before 区别?"></a>9. :before 和 ::before 区别?</h5><p>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。<br>对于CSS2之前已有的伪元素，比如:before，单冒号和双冒号的写法::before作用是一样的。</p>
<h5 id="10-如何让一个div-上下左右居中"><a href="#10-如何让一个div-上下左右居中" class="headerlink" title="10.如何让一个div 上下左右居中?"></a>10.如何让一个div 上下左右居中?</h5><blockquote>
<p>我想这个网上一搜一大堆的。我记得以前我也总结过。现在比较方便的使用flex布局来做吧。有关flex布局的学习内容可以去阮老师的博客里看一下，很全面。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.div1&#123;</div><div class="line">         width:400px;</div><div class="line">         height:400px;</div><div class="line">         border:#CCC 1px solid;</div><div class="line">         background:#99f;</div><div class="line">         position:absolute;</div><div class="line">         left:50%;</div><div class="line">         top:50%;</div><div class="line">         transform: translate(-50%,-50%);</div><div class="line">&#125;                        </div><div class="line">&lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">.div&#123;</div><div class="line">    width:400px;</div><div class="line">    height:400px;</div><div class="line">    border:#CCC 1px solid;</div><div class="line">    background:#9f9;</div><div class="line">    position: absolute;</div><div class="line">    left: 50%;</div><div class="line">    top:50%;</div><div class="line">    margin-left:-200px;</div><div class="line">    margin-top: -200px;        </div><div class="line">&#125;</div><div class="line">&lt;div class=&quot;div&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>后面这种我经常用。~~</p>
<h5 id="11-css2-0-和css3-0"><a href="#11-css2-0-和css3-0" class="headerlink" title="11.css2.0 和css3.0"></a>11.css2.0 和css3.0</h5><p>css3加强了css2的功能，增加了新的属性和新的标签，并且删除了一些冗余的标签，在布局方面减少了代码量。以前比较复杂的布局现在一个属性就搞定了（columns之类的属性）。在效果方面加入了更多的效果(圆角，动画之类的)，还有在盒子模型和列表模块都进行了改进。不过CSS3兼容性不好，只有一些高级版本的浏览器支持。</p>
<h5 id="12-弹性盒子模型-flex-box区别"><a href="#12-弹性盒子模型-flex-box区别" class="headerlink" title="12.弹性盒子模型?flex|box区别?"></a>12.弹性盒子模型?flex|box区别?</h5><p>答：（1）引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的条目进行排列、对齐和分配空白空间。即便容器中条目的尺寸未知或是动态变化的，弹性盒布局模型也能正常的工作。在该布局模型中，容器会根据布局的需要，调整其中包含的条目的尺寸和顺序来最好地填充所有可用的空间。当容器的尺寸由于屏幕大小或窗口尺寸发生变化时，其中包含的条目也会被动态地调整。比如当容器尺寸变大时，其中包含的条目会被拉伸以占满多余的空白空间；当容器尺寸变小时，条目会被缩小以防止超出容器的范围。弹性盒布局是与方向无关的。在传统的布局方式中，block 布局是把块在垂直方向从上到下依次排列的；而 inline 布局则是在水平方向来排列。弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。<br>（2）flex和box的区别:<br>display：box 是老规范，要兼顾古董机子就加上它；<br>父级元素有display:box;属性之后。他的子元素里面加上box-flex属性。可以让子元素按照父元素的宽度进行一定比例的分占空间。<br>flex是最新的，董机老机子不支持的；<br>父元素设置display:flex后，子元素宽度会随父元素宽度的改变而改变，而display:box不会。<br>Android UC浏览器只支持display: box语法；而iOS UC浏览器则支持两种方式。</p>
<blockquote>
<p>不过对于UC浏览器，网上又很多的解决方案。github上有人写了一个关于兼容各种设备的flexCSS方法。地址：<a href="https://github.com/lzxb/flex.css" target="_blank" rel="external">https://github.com/lzxb/flex.css</a></p>
</blockquote>
<h5 id="13-viewport的所有属性"><a href="#13-viewport的所有属性" class="headerlink" title="13. viewport的所有属性"></a>13. viewport的所有属性</h5><p>1）width :设置layout viewport的宽度，为一个正整数，或字符串’device-width’;<br>2）initial-scale:设置页面的初始缩放值，为一个数字，可以带小数。<br>3）minimun-scale:允许用户的最小缩放值，一个数字，可以带小数。<br>4）maximum-scale:允许用户的最大缩放值，一个数字，可以带小数。<br>5）height:设置layout viewport的高度，这个属性对我们并不重要，很少使用。<br>6）user-scalable:是否允许用户进行缩放，值为‘no’或者‘yes’。<br>7）target-densitydpi:值可以为一个数值或者 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个</p>
<blockquote>
<p>target-densitydpi 这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素。特别说明的是，当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。因为这个属性只有安卓支持，并且安卓已经决定要废弃 target-densitydpi 这个属性了，尽量避免使用这个属性。<br>关于viewport，在慕课网专门有个教程专门介绍的这个，有兴趣去看看。</p>
</blockquote>
<h5 id="14-如何理解HTML结构的语义化？"><a href="#14-如何理解HTML结构的语义化？" class="headerlink" title="14.如何理解HTML结构的语义化？"></a>14.如何理解HTML结构的语义化？</h5><p>所谓标签语义化，就是指标签的含义。语义化的主要目的就是让大家直观的认识标签(markup)和属性(attribute)的用途和作用，对搜索引擎友好，有了良好的结构和语义我们的网页内容便自然容易被搜索引擎抓取，这种符合搜索引擎收索规则的做法，网站的推广便可以省下不少的功夫，而且可维护性更高，因为结构清晰,十分易于阅读。这也是搜索引擎优化SEO重要的一步。</p>
<h5 id="15-伪类选择器和伪元素？c3中引入的伪类选择器有？c3中伪元素有"><a href="#15-伪类选择器和伪元素？c3中引入的伪类选择器有？c3中伪元素有" class="headerlink" title="15. 伪类选择器和伪元素？c3中引入的伪类选择器有？c3中伪元素有?"></a>15. 伪类选择器和伪元素？c3中引入的伪类选择器有？c3中伪元素有?</h5><p>伪类选择器：<br>由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。<br>伪元素选择器：<br>并不是针对真正的元素使用的选择器，而是针对CSS中已经定义好的伪元素使用的选择器；</p>
<p>c3中引入的伪类选择器：<br>:root()选择器，根选择器，匹配元素E所在文档的根元素。在HTML文档中，根元素始终是html。:root选择器等同于html元素。<br>:not()选择器称为否定选择器，和jQuery中的:not选择器一模一样，可以选择除某个元素之外的所有元素。<br>:empty()选择器表示的就是空。用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格。<br>:target()选择器来对页面某个target元素(该元素的id被当做页面中的超链接来使用)指定样式，该样式只在用户点击了页面中的超链接，并且跳转到target元素后起作用。<br>:first-child()选择器表示的是选择父元素的第一个子元素的元素E。简单点理解就是选择元素中的第一个子元素，记住是子元素，而不是后代元素。<br>:nth-child()选择某个元素的一个或多个特定的子元素。<br>:nth-last-child()从某父元素的最后一个子元素开始计算，来选择特定的元素<br>:nth-of-type(n)选择器和:nth-child(n)选择器非常类似，不同的是它只计算父元素中指定的某种类型的子元素。<br>:only-child表示的是一个元素是它的父元素的唯一一个子元素。<br>:first-line为某个元素的第一行文字使用样式。<br>:first-letter 为某个元素中的文字的首字母或第一个字使用样式。<br>:before  在某个元素之前插入一些内容。<br>:after  在某个元素之后插入一些内容。<br>c3中伪元素：<br>::first-line选择元素的第一行，比如说改变每个段落的第一行文本的样式<br>::before和::after这两个主要用来给元素的前面或后面插入内容，这两个常用”content”配合使用，见过最多的就是清除浮动<br>::selection用来改变浏览网页选中文的默认效果</p>
<h5 id="16-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#16-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="16.html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>16.html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h5><ul>
<li>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。 </li>
<li><p>拖拽释放(Drag and drop) API<br>语义化更好的内容标签（header,nav,footer,aside,article,section）<br>音频、视频API(audio,video)<br>画布(Canvas) API<br>地理(Geolocation) API<br>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；         sessionStorage 的数据在浏览器关闭后自动删除<br>表单控件，calendar、date、time、email、url、search<br>新的技术webworker, websocket, Geolocation </p>
</li>
<li><p>移除的元素 纯表现的元素：basefont，big，center，font, s，strike，tt，u；<br>对可用性产生负面影响的元素：frame，frameset，noframes；</p>
</li>
</ul>
<p>支持HTML5新标签： </p>
<ul>
<li>IE8/IE7/IE6支持通过document.createElement方法产生的标签， 可以利用这一特性让这些浏览器支持HTML5新标签， 浏览器支持新标签后，还需要添加标签默认的样式： </li>
<li><p>当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</p>
<!--[if lt IE 9]> <script>         src="http://html5shim.googlecode.com/svn/trunk/html5.js"</script> 
<![endif]--> 
</li>
<li><p>如何区分： DOCTYPE声明\新增的结构元素\功能元素</p>
</li>
</ul>
<h5 id="17-常见兼容性问题？"><a href="#17-常见兼容性问题？" class="headerlink" title="17.常见兼容性问题？"></a>17.常见兼容性问题？</h5><p> 1) 浏览器默认的margin和padding不同。解决方案是加一个全局的{margin:0;padding:0;}来统一。<br>2) IE下,可以使用获取常规属性的方法来获取自定义属性,<br>   也可以使用getAttribute()获取自定义属性;<br>   Firefox下,只能使用getAttribute()获取自定义属性.<br>   解决方法:统一通过getAttribute()获取自定义属性.<br>3)IE下,event对象有x,y属性,但是没有pageX,pageY属性;<br>  Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.<br>解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。<br>4)Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,<br>  可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.<br>5)超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:<br>L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}<br>6)怪异模式问题：漏写DTD声明，Firefox仍然会按照标准模式来解析网页，但在IE中会触发怪异模式。为避免怪异模式给我们带来不必要的麻烦，最好养成书写DTD声明的好习惯。现在可以使用<a href="http://www.w3.org/TR/html5/single-page.html" target="_blank" rel="external">html5</a>推荐的写法：<code>&lt;doctype html&gt;</code><br>7)上下margin重合问题<br>ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。<br>解决方法，养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。</p>
<blockquote>
<p>ps:多说一下上下重叠的几种情况:<br>a:普通模式中，俩个或多个块级元素相邻的垂直变，会重合。如果边距都为正数，那么取最大的。如果出现负边距，用正边距减去负边距。<br>b:一个浮动框和其它框之间不会重叠。<br>c:绝对定位的和相对定位的，边距不会重合。</p>
</blockquote>
<h5 id="18-简述前端优化的方式-旧的雅虎34条-h5新添加的方式"><a href="#18-简述前端优化的方式-旧的雅虎34条-h5新添加的方式" class="headerlink" title="18.简述前端优化的方式 旧的雅虎34条|h5新添加的方式"></a>18.简述前端优化的方式 旧的雅虎34条|h5新添加的方式</h5><p>1、尽量减少HTTP请求次数<br>2、减少DNS查找次数<br>3、避免跳转<br>4、可缓存的AJAX<br>5、推迟加载内容<br>6、预加载<br>7、减少DOM元素数量<br>8、根据域名划分页面内容<br>9、使iframe的数量最小<br>10、不要出现404错误<br>11、使用内容分发网络<br>12、为文件头指定Expires或Cache-Control        13、Gzip压缩文件内容<br>14、配置ETag<br>15、尽早刷新输出缓冲<br>16、使用GET来完成AJAX请求<br>17、把样式表置于顶部<br>18、避免使用CSS表达式（Expression）<br>19、使用外部JavaScript和CSS<br>20、削减JavaScript和CSS<br>21、用<link>代替@import<br>22、避免使用滤镜<br>23、把脚本置于页面底部<br>24、剔除重复脚本</p>
<h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><h5 id="1-四次握手阶段详细过程"><a href="#1-四次握手阶段详细过程" class="headerlink" title="1.四次握手阶段详细过程"></a>1.四次握手阶段详细过程</h5><p>1)客户端发出请求（ClientHello）<br>（1） 支持的协议版本，比如TLS 1.0版。<br>（2） 一个客户端生成的随机数，稍后用于生成”对话密钥”。<br>（3） 支持的加密方法，比如RSA公钥加密。<br>（4） 支持的压缩方法。<br>2)服务器回应（SeverHello）<br>（1） 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。<br>（2） 一个服务器生成的随机数，稍后用于生成”对话密钥”。<br>（3） 确认使用的加密方法，比如RSA公钥加密。<br>（4） 服务器证书。<br>3)客户端回应<br>（1） 一个随机数。该随机数用服务器公钥加密，防止被窃听。<br>（2） 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。<br>（3） 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。<br>4)服务器的最后回应<br>（1）编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。<br>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。</p>
<blockquote>
<p>这个四次握手内容来源来自阮一峰老师的SSL/TLS协议运行机制的概述。</p>
</blockquote>
<p>（未完待续）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://az619519.vo.msecnd.net/files/ElmiraTreeFarm_EN-US8943841460_1366x768.jpg&quot; alt=&quot;alt text&quot;&gt;&lt;br&gt;图片来源：必应图库&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>canvas将图片转化为base64</title>
    <link href="http://yoursite.com/2016/12/23/canvas%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E5%8C%96%E4%B8%BAbase64/"/>
    <id>http://yoursite.com/2016/12/23/canvas将图片转化为base64/</id>
    <published>2016-12-23T06:16:20.000Z</published>
    <updated>2017-01-28T03:34:44.147Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/f5b4199c731650b6.jpg" alt=""><br><a id="more"></a><!--more--></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>同学看别人源码，发现img资源一堆乱七八糟的大长串字符，截图问我是什么？我说应该是base64编码，然后8l8l跟他随便说说。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>好处是什么？<br>我觉得长时间展示不变的图片可以利用localStorage往浏览器里存啊。<br>减少HTTP请求。<br>当然，就像我朋友说的，图片属性过长，CSS大小也会有影响。浏览器端IE8以上好像大多都支持了。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>从网上看了看，有通过FileReader获取图片的base64。<br>我使用canvas转的，说说这个方法的实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var img = &quot;http://7xib7m.com1.z0.glb.clouddn.com/img/article/2016/12-14/1-UuKf1FDEJp3bF96aY3KEqg.png&quot;;</div><div class="line"></div><div class="line">function getCanvas(img, style) &#123;</div><div class="line">     var canvas = document.createElement(&quot;canvas&quot;);</div><div class="line">     var imgContext = canvas.getContext(&quot;2d&quot;);</div><div class="line">     canvas.width = img.width;</div><div class="line">     canvas.height = img.height;</div><div class="line">     imgContext.drawImage(img, 0, 0, img.width, img.height);</div><div class="line">     var canvasUrl = canvas.toDataURL(&quot;image/&quot; + style);</div><div class="line">     return canvasUrl;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> function setLocal(key, value) &#123;</div><div class="line">     localStorage.setItem(key, value);</div><div class="line"> &#125;</div><div class="line"></div><div class="line">var imgStyle = img.substring(img.lastIndexOf(&quot;.&quot;) + 1).toLowerCase();</div><div class="line">   var image = new Image();</div><div class="line">   image.crossOrigin = &apos;&apos;;</div><div class="line">   image.src = img;</div><div class="line">   image.onload = function() &#123;</div><div class="line">       var canvasImg = getCanvas(image, imgStyle);</div><div class="line">       console.log(canvasImg);</div><div class="line">       setLocal(&apos;t1&apos;, canvasImg);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从网上随便找了张图片，<br>获得图片的信息，建一个canvas对象，并把图片信息的属性通过canvas重构了一遍，再通过canvas.toDataURL方法转换为base64编码。<br>最后通过localStorage，把内容存在本地。<br><img src="http://i1.piimg.com/567571/108ee2a04c7f42cc.jpg" alt=""><br>我从浏览器取了一下。<br>不过这个localstorage有5M的使用上限，过度使用的话，还是要注意一点的。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>看了几篇别人的博客发现了几个小问题：<br>报错信息：<br><img src="http://p1.bpimg.com/567571/4e62803c98ffa172.jpg" alt=""><br>如果是这种问题，在代码中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">image.crossOrigin = &apos;&apos;;</div></pre></td></tr></table></figure></p>
<p>这是引用外部图片引起的跨域问题。</p>
<p>报错信息：<br><img src="http://p1.bpimg.com/567571/f033a8f2a6eab8a7.jpg" alt=""><br>这是从别人的博客里，有网友提问的，好像博主也没有回答清楚。<br>我查了一下，这是由图片方的服务器不允许跨域访问造成的。<br>看这张图<br><img src="http://p1.bpimg.com/567571/8c625f48038bfd50.jpg" alt=""><br>一般有这个属性的，一定可以成功的。</p>
<p>最后，安利一个 <a href="http://www.pjhome.net/web/html5/encodeDataUrl.htm" target="_blank" rel="external">本地图片生成base64的网址。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/f5b4199c731650b6.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>我的微信小程序入门踩坑之旅</title>
    <link href="http://yoursite.com/2016/12/01/%E6%88%91%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/"/>
    <id>http://yoursite.com/2016/12/01/我的微信小程序入门踩坑之旅/</id>
    <published>2016-12-01T08:01:20.000Z</published>
    <updated>2017-01-28T03:34:44.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/567571/9c77c4650cbb299f.jpg" alt=""><br><a id="more"></a><!--more--></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>小程序出来也有一段日子了，刚出来时也留意了一下。不过赶上生病，加上公司里也有别的事，主要是自己犯懒，就一直没做。这星期一，赶紧趁着这股热乎劲，也不是很忙，终于磨磨唧唧的写了个小demo，（当然还有好多接口没有使用）。</p>
<p>预计阅读时间：5min</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>小程序的框架，挺像Vue的。</p>
<p>wxml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;view&gt; Hello &#123;&#123;name&#125;&#125;! &lt;/view&gt;</div><div class="line">&lt;button bindtap=&quot;changeName&quot;&gt; Click me! &lt;/button&gt;</div></pre></td></tr></table></figure></p>
<p>js部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// This is our App Service.</div><div class="line">// This is our data.</div><div class="line">var helloData = &#123;</div><div class="line">  name: &apos;WeChat&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Register a Page.</div><div class="line">Page(&#123;</div><div class="line">  data: helloData,</div><div class="line">  changeName: function(e) &#123;</div><div class="line">    // sent data change to view</div><div class="line">    this.setData(&#123;</div><div class="line">      name: &apos;MINA&apos;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>开发者通过框架将逻辑层数据中的 name 与视图层的 name 进行了绑定，所以在页面一打开的时候会显示 Hello WeChat!<br>当点击按钮的时候，视图层会发送 changeName 的事件给逻辑层，逻辑层找到对应的事件处理函数<br>逻辑层执行了 setData 的操作，将 name 从 WeChat 变为 MINA，因为该数据和视图层已经绑定了，从而视图层会自动改变为 Hello MINA!</p>
</blockquote>
<p>工具： <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=1477579747265" target="_blank" rel="external">微信 web 开发者工具</a><br>我一般在这里只预览效果用。</p>
<h4 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h4><p>app.json文件来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p>
<p>改变pages里配置，会更改启动程序时的主页面。<br>window是设置页面的窗口表现，包括状态栏，导航栏颜色 等等。<br>tarbar是底部tab栏的表现。<br>官方还有 networkTimeout和 debug选项，在这里没有配置。<br>networkTimeout可以设置各种网络请求的超时时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">   &#123;</div><div class="line">    &quot;pages&quot;: [</div><div class="line">        &quot;pages/index/other&quot;,</div><div class="line">        &quot;pages/other/index&quot;,</div><div class="line">        &quot;pages/logs/logs&quot;,</div><div class="line">        &quot;pages/login/login&quot;,</div><div class="line">        &quot;pages/douban/douban&quot;,</div><div class="line">        &quot;pages/douban/user&quot;,</div><div class="line">        &quot;pages/other/comment&quot;</div><div class="line">    ],</div><div class="line">    &quot;window&quot;: &#123;</div><div class="line">        &quot;backgroundTextStyle&quot;: &quot;light&quot;,</div><div class="line">        &quot;navigationBarBackgroundColor&quot;: &quot;#3CB371&quot;,</div><div class="line">        &quot;navigationBarTitleText&quot;: &quot;Ed Glayxe&quot;,</div><div class="line">        &quot;navigationBarTextStyle&quot;: &quot;light&quot;,</div><div class="line">        &quot;backgroundColor&quot;: &quot;#3CB371&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;tabBar&quot;: &#123;</div><div class="line">        &quot;list&quot;: [&#123;</div><div class="line">            &quot;pagePath&quot;: &quot;pages/index/index&quot;,</div><div class="line">            &quot;text&quot;: &quot;我的&quot;,</div><div class="line">            &quot;iconPath&quot;: &quot;images/tabList/my_a.png&quot;,</div><div class="line">            &quot;selectedIconPath&quot;: &quot;images/tabList/my_b.png&quot;</div><div class="line">        &#125;, &#123;</div><div class="line">            &quot;pagePath&quot;: &quot;pages/logs/logs&quot;,</div><div class="line">            &quot;text&quot;: &quot;日志&quot;,</div><div class="line">            &quot;iconPath&quot;: &quot;images/tabList/log_a.png&quot;,</div><div class="line">            &quot;selectedIconPath&quot;: &quot;images/tabList/log_b.png&quot;</div><div class="line">        &#125;, &#123;</div><div class="line">            &quot;pagePath&quot;: &quot;pages/other/other&quot;,</div><div class="line">            &quot;text&quot;: &quot;段子&quot;,</div><div class="line">            &quot;iconPath&quot;: &quot;images/tabList/joke_a.png&quot;,</div><div class="line">            &quot;selectedIconPath&quot;: &quot;images/tabList/joke_b.png&quot;</div><div class="line">        &#125;, &#123;</div><div class="line">            &quot;pagePath&quot;: &quot;pages/login/login&quot;,</div><div class="line">            &quot;text&quot;: &quot;登录&quot;,</div><div class="line">            &quot;iconPath&quot;: &quot;images/tabList/Login_a.png&quot;,</div><div class="line">            &quot;selectedIconPath&quot;: &quot;images/tabList/Login_b.png&quot;</div><div class="line">        &#125;, &#123;</div><div class="line">            &quot;pagePath&quot;: &quot;pages/douban/douban&quot;,</div><div class="line">            &quot;text&quot;: &quot;用户列表&quot;,</div><div class="line">            &quot;iconPath&quot;: &quot;images/tabList/user_a.png&quot;,</div><div class="line">            &quot;selectedIconPath&quot;: &quot;images/tabList/user_b.png&quot;</div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="页面文件"><a href="#页面文件" class="headerlink" title="页面文件"></a>页面文件</h4><p><img src="http://i1.piimg.com/567571/fb5bb6eac36921d1.jpg" alt=""></p>
<p>app.js、app.json、app.wxss这三个文件是必不可少的文件。.js后缀的是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件。微信小程序会读取这些文件，并生成小程序实例。这些都是公共文件。<br>在我的wxss里引入了weui的wxss 有的页面使用了它的UI。</p>
<p>Pages 里面是对应的页面。每个对应的页面里都有 相应的js wxml wxss文件。对文件进行配置。</p>
<p>在common文件夹了 写了一个评论template 尝试了一下引入模板。<br>在utils里封装了一下内部的方法。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在小程序里支持flex布局，还是挺不错的。<br>我有时布局的时候都给写个html文件，在浏览器里看看样式。然后照搬到微信小程序里。但是我写的页面并不复杂。并不能完全的发现更多的不同。<br>在小程序里试图层为view ，但它并不像div一样，view 和text在一起会重叠。我觉得相当于 div和span。<br>还有一些CSS样式并不支持。</p>
<p>数据渲染：<br><img src="http://p1.bqimg.com/567571/3b7af6b71558dcf1.jpg" alt=""><br>这个用flex布局写的，页面比较简单。</p>
<p>我记得昨天有个东西我找了好久，就是<br> “enablePullDownRefresh”: true。允许用户下拉。<br> 一开始我以为这是自己写的。这是配置在json文件里。官方的文件几乎没怎么看。。然后就尴尬了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">var util = require(&quot;../../utils/util.js&quot;);</div><div class="line">var app = getApp();</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">    data: &#123;</div><div class="line">        textDataList: [],</div><div class="line">        tempid: 0,</div><div class="line">        lastid: 0</div><div class="line">    &#125;,</div><div class="line">    onLoad: function() &#123;</div><div class="line">        util.alertLoading(&apos;数据加载中&apos;, 2000);</div><div class="line">        this.loadData();</div><div class="line">    &#125;,</div><div class="line">    refreshData: function() &#123;</div><div class="line">        util.alertLoading(&apos;刷新中&apos;, 2000);</div><div class="line">        this.loadData();</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    loadData: function() &#123;</div><div class="line">        var that = this;</div><div class="line">        var url = &apos;http://api.budejie.com/api/api_open.php&apos;;</div><div class="line">        var requireData = &#123; a: &apos;list&apos;, c: &apos;data&apos;, type: &apos;29&apos; &#125;;</div><div class="line">        util.request(url, requireData, function(res) &#123;</div><div class="line">            var newData = res.data;</div><div class="line">            that.setData(&#123;</div><div class="line">                textDataList: newData.list,</div><div class="line">                tempid: newData.list[0].id</div><div class="line">            &#125;)</div><div class="line">            console.log(that.data.tempid);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    onReachBottom: function() &#123;</div><div class="line">        util.alertLoading(&quot;加载中!&quot;, 2000);</div><div class="line">        console.log(&quot;加载这个没做 = =！&quot;);</div><div class="line">    &#125;,</div><div class="line">    onPullDownRefresh: function() &#123;</div><div class="line">        util.alertLoading(&quot;刷新中！&quot;, 1000);</div><div class="line">        var that = this;</div><div class="line">        var url = &apos;http://api.budejie.com/api/api_open.php&apos;;</div><div class="line">        var requireData = &#123; a: &apos;list&apos;, c: &apos;data&apos;, type: &apos;29&apos; &#125;;</div><div class="line">        util.request(url, requireData, function(res) &#123;</div><div class="line">            var newData = res.data;</div><div class="line">            that.setData(&#123;</div><div class="line">                textDataList: newData.list,</div><div class="line">                lastid: newData.list[0].id</div><div class="line">            &#125;)</div><div class="line">            console.log(that.data.lastid);</div><div class="line">        &#125;);</div><div class="line">        if (this.data.lastid === this.data.tempid) &#123;</div><div class="line">            util.alertSuccess(&quot;已经是最新了&quot;, 1000);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>微信小程序思维导图（来源于网络）<br><img src="http://p1.bqimg.com/567571/857adc4cee5e30bc.png" alt=""></p>
<h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><p>快下班了，其实写之前我想写的更详细一点，但更多的介绍我想没有比官方更清楚的。</p>
<p>我觉得最好的学习方式就是撸一遍代码，比看10个demo有用的多。</p>
<p>时间仓促，页面很简单。也希望把你的demo分享给我互相学习。感谢你的阅读，</p>
<p> Bye。</p>
<p>项目地址： <a href="https://github.com/miloers/WxSmall" target="_blank" rel="external">https://github.com/miloers/WxSmall</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/567571/9c77c4650cbb299f.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="WeChat" scheme="http://yoursite.com/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title>爱与分享</title>
    <link href="http://yoursite.com/2016/11/23/%E7%88%B1%E4%B8%8E%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2016/11/23/爱与分享/</id>
    <published>2016-11-23T02:21:25.000Z</published>
    <updated>2017-01-28T03:34:44.151Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/567571/1e7f4839536a3813.jpg" alt="alt text"></p>
<blockquote>
<p>这是非洲一个饥饿的孩子，把他手上另一颗糖让给了站在他对面的摄影师！他给全世界的人上了一堂课：富贵不在于拥有，而在于分享。</p>
</blockquote>
<p>这是前些天看见的一图，当时心有感触。</p>
<a id="more"></a><!--more-->
<h5 id="随便瞎写写"><a href="#随便瞎写写" class="headerlink" title="随便瞎写写"></a>随便瞎写写</h5><p>时光不叙，不知道从什么时候开始没有了小时候的纯真。</p>
<p>敢说自己不是坏人，遇见陌生人，力所能及的能帮也会帮。但路边扶人这种事也是做不来的。</p>
<p>我记得上初中的时候，下学回家，骑得也不是很快，但眼神不自在，看着别处，把一个行人大爷给撞了。跪在地上，把我吓坏了。记忆里，当时还没有碰瓷，好像就在03年左右。但我也怕招惹事端，回家免不了挨得一顿狠揍。不过大爷拍拍土起身，跟我说没事。只叫我注意着点。我觉得这件事对我价值观影响挺大的，以后再大非面前也不会迷了路。</p>
<p>前些日子晚上加班走的晚，夜黑，在赶上肚子也饿，一着急就被车撞了，司机下来连忙道歉，其实我也没想怎么样。我扭了扭身子，当时就是感觉脚腕子有点疼。就叫他走了。我记得当时周围很多人，在指指点点，我想用我的力量也去感染别人。</p>
<p>前几天看个小故事，说是有个刚上幼儿园的小姑娘。</p>
<p>在班上，老师问：“你们长大了想干什么啊？” 小姑娘回答，当医生。老师说，当医生好，当医生以后好赚钱。 小姑娘眨了眨眼睛问，当医生不是为了救人吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/567571/1e7f4839536a3813.jpg&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是非洲一个饥饿的孩子，把他手上另一颗糖让给了站在他对面的摄影师！他给全世界的人上了一堂课：富贵不在于拥有，而在于分享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是前些天看见的一图，当时心有感触。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>js this学习笔记</title>
    <link href="http://yoursite.com/2016/11/16/js-this%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/11/16/js-this学习笔记/</id>
    <published>2016-11-16T02:50:36.000Z</published>
    <updated>2017-01-28T03:34:44.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.zaixian-fanyi.com/images/thisthat.jpg" alt="enter image description here"><br><a id="more"></a><!--more--></p>
<h4 id="this-指向什么？它从哪来？"><a href="#this-指向什么？它从哪来？" class="headerlink" title="this 指向什么？它从哪来？"></a>this 指向什么？它从哪来？</h4><blockquote>
<p>this 不是编写时绑定，而是运行时绑定。它依赖于函数调用的上下文条件，this绑定和函数声明的位置无关，反而和被调用的方式有关。<br>this实际上是在函数被调用时建立的一个绑定，指向什么完全由函数被调用的调用点来决定。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ct</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="comment">//全局作用域</span></div><div class="line">     <span class="built_in">console</span>.log(<span class="string">"funct"</span>);</div><div class="line">     t();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// ct-&gt;t</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"funt"</span>);</div><div class="line">    tct();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tct</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// ct-&gt;t-&gt;tct</span></div><div class="line">     <span class="built_in">console</span>.log(<span class="string">"funtct"</span>);</div><div class="line">&#125;</div><div class="line">ct();</div></pre></td></tr></table></figure>
<h4 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ct</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line"></div><div class="line">ct(); <span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>这时解析this.a解析成全局变量a.函数ct()是一个很直接，并无修饰应用调用的函数。</p>
<p>在严格模式中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ct</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">   'use strict'</span>;</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">ct(); <span class="comment">// TypeError: Cannot read property 'a' of undefined</span></div></pre></td></tr></table></figure>
<h4 id="隐含绑定"><a href="#隐含绑定" class="headerlink" title="隐含绑定"></a>隐含绑定</h4><p>这个我自己理解就是 obj和foo相互之间是挨着的。中间没有缝隙。<br>想象一下这个状态一对情侣坐在一起，手牵着手。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> obj = &#123;</div><div class="line">     <span class="attr">a</span>: <span class="number">2</span>,</div><div class="line">     <span class="attr">foo</span>: foo</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"></div><div class="line"> obj.foo(); <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>隐含调用的时候,注意最后调用者(obj)的函数属性, ct调用点-》obj调用点。只有对象属性引用链的最后一层是影响调用点的。<br>想象一下这个状态 ：一个你的同伴(ct)，你(obj)，你的老婆(foo)坐在一起（注意这个顺序）。你们三个人手牵着手。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">     <span class="attr">a</span>: <span class="number">2</span>,</div><div class="line">     <span class="attr">foo</span>: foo</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">var</span> ct = &#123;</div><div class="line">     <span class="attr">a</span>: <span class="number">4</span>,</div><div class="line">     <span class="attr">obj</span>: obj</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"></div><div class="line"> ct.obj.foo(); <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<h4 id="隐含的丢失"><a href="#隐含的丢失" class="headerlink" title="隐含的丢失"></a>隐含的丢失</h4><p>你和你老婆坐在一起，你老婆想和你牵手，而你拒绝了，那么你老婆就要牵其他人的手拉~~。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line"> &#125;       </div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">     <span class="attr">a</span>: <span class="number">2</span>,</div><div class="line">     <span class="attr">foo</span>: foo</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> bar = obj.foo</div><div class="line"></div><div class="line"> <span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"></div><div class="line"> bar(); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<p>在这里 bar 只是调用了obj.foo的引用。<br>想象一下这个顺序状态：你 =》你的基友 =》你老婆。</p>
<p>参数传递仅仅是一种隐含的赋值，而且因为我们在传递一个函数，它是一个隐含的引用赋值，fn是obj.foo的引用，其实整体意思是和上面的例子是一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    fn();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">foo</span>: foo</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="string">"oops,global"</span>;</div><div class="line"></div><div class="line">doFoo(obj.foo); <span class="comment">//oops,global</span></div></pre></td></tr></table></figure></p>
<h4 id="明确绑定-call-apply-bind"><a href="#明确绑定-call-apply-bind" class="headerlink" title="明确绑定 call apply bind"></a>明确绑定 call apply bind</h4><p>我觉得每次学习都会刷新对知识的感知，主要就是因为我对知识认识的不足够透彻。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line">foo.call(obj);</div></pre></td></tr></table></figure>
<p>你需要强制一个函数调用使用某个特定对象作为this绑定，而不在这个对象上放一个函数引用。  通过foo.call()  来明确调用obj，这时this指向obj。</p>
<h4 id="进化"><a href="#进化" class="headerlink" title="进化"></a>进化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line"> <span class="keyword">var</span> obj = &#123;</div><div class="line">     <span class="attr">a</span>: <span class="number">2</span></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     foo.call(obj);</div><div class="line"> &#125;</div><div class="line"> setTimeout(bar, <span class="number">100</span>); <span class="comment">//2</span></div><div class="line"> bar.call(<span class="built_in">window</span>); <span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>bar函数被调用时，总是把this强制到obj上，并调用函数foo。</p>
<p>我自己体会了一下这几个例子，感觉挺通透的。</p>
<blockquote>
<p>fun.apply(thisArg[, argsArray])<br>    thisArg<br>        在 fun 函数运行时指定的 this 值。 需要注意的是， 指定的 this 值并不一定是该函数执行时真正的 this 值， 如果这个函数处于非严格模式下， 则指定为 null 或 undefined 时会自动指向全局对象（ 浏览器中就是window对象）， 同时值为原始值（ 数字， 字符串， 布尔值） 的 this 会指向该原始值的自动包装对象。<br>  argsArray<br>        一个数组或者类数组对象， 其中的数组元素将作为单独的参数传给 fun 函数。 如果该参数的值为null 或 undefined， 则表示不需要传入任何参数。<br>        apply 与 call() 非常相似，不同之处在于提供参数的方式。<br>        来源MDN<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">other</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a + other;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo.apply(obj, <span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = bar(<span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">//12</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="bind的例子"><a href="#bind的例子" class="headerlink" title="bind的例子"></a>bind的例子</h5><p>bind()返回一个硬编码的新函数，它使用你指定的this环境来调用原本的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">other</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + other;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> obj = &#123;</div><div class="line">     <span class="attr">a</span>: <span class="number">2</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> bar = foo.bind(obj);</div><div class="line"> <span class="keyword">var</span> b = bar(<span class="number">11</span>);</div><div class="line"> <span class="built_in">console</span>.log(b); <span class="comment">//12</span></div></pre></td></tr></table></figure></p>
<h5 id="这里有个关于Bind的趣味详解"><a href="#这里有个关于Bind的趣味详解" class="headerlink" title="这里有个关于Bind的趣味详解"></a>这里有个关于Bind的趣味详解</h5><p>你（son）和你爸（papa）在一块的时候，大家都会知道你爸爸的名字（不知道可以直接问啊！），用代码来说就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> papa = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"li gang"</span>,</div><div class="line">    <span class="attr">son</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">alert( papa.son() );</div></pre></td></tr></table></figure></p>
<p>但是你不和你爸在一块的时候呢？就成了这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> son = papa.son;</div><div class="line">alert( son() );</div></pre></td></tr></table></figure></p>
<p>你会发现你大家没办法知道你爸的名字了，然后你就不能为非作歹了。好在你还记得你爸的电话号码，打个电话就又可以兴风作浪又知道了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert( son.call(papa) );</div></pre></td></tr></table></figure></p>
<p>然后你想了想，不行啊，不能我每次兴风作浪的时候都得打我爸电话吧，我爸还不得弄死我。诶！这么笨，我随身带着我爸的身份证复印件不就好了嘛，所以你就成了这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">son = son.bind( papa );</div><div class="line">alert( son() );</div></pre></td></tr></table></figure></p>
<p>哈哈，爸爸再也不用担心我出门被打叻(๑´ㅂ`๑)！</p>
<p>就这样又过了半年你爸爸大人作死收了一个养子！什么！遗产全部都是我的！养子的中文名叫 二狗子，英文名叫 er~Gou~Zi：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">erGouZi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个二狗子养子也想知道你爸的名字好出去泡妞把妹歌功颂德，哀求了半天之后，老爸也给了他一份复印件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">erGouZi = erGouZi.bind( papa );</div><div class="line">alert( erGouZi() );</div></pre></td></tr></table></figure></p>
<p>二狗子这货啊表示非常高兴，决定每次报出爸爸的大名的时候都要加上敬爱的三个字，就像我们经常说敬爱的 x 总理 一样，于是他机智的做了一次小手术：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">erGouZi = function() &#123;</div><div class="line">    var prefix = arguments[0] || &quot;&quot;;</div><div class="line">    return prefix + this.name;</div><div class="line">&#125;</div><div class="line">erGouZi = erGouZi.bind( papa, &quot;great &quot; );</div><div class="line">alert( erGouZi() );</div></pre></td></tr></table></figure></p>
<p>又没过多久，这事被老爸知道了。老爸对于二狗子这种舔脚后跟的行为表示非常满意，对他越来越恩爱亲切，对你越来越冷板凳。最后终于老爸把所有的遗产都给了二狗子而你因为平常只会坑蒙拐骗啥技能也不会只能上街乞讨最后被城管暴打而死。</p>
<p>这个关于bind的理解来自于 <a href="https://segmentfault.com/q/1010000002508005" target="_blank" rel="external">如何理解，javascript bind</a>感兴趣的可以去溜溜。</p>
<p>这个解答很有意思，也特别容易理解。</p>
<h4 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h4><p>先来定义一下new，来自MDN</p>
<blockquote>
<p>new运算符的作用是创建一个对象实例。这个对象可以是用户自定义的，也可以是一些系统自带的带构造函数的对象。</p>
</blockquote>
<p>语法</p>
<blockquote>
<p>new constructor[([arguments])]</p>
</blockquote>
<p>参数</p>
<blockquote>
<p>构造函数(constructor)<br>一个指明了对象类型的函数。<br>传参(arguments)<br>一个用来被构造函数调用的参数列表。</p>
</blockquote>
<p>当new foo 函数执行时，来看看它做了什么？</p>
<blockquote>
<p>1.一个新对象被创建。它继承自foo.prototype.<br>2.构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文(this)会被指定为这个新实例。new foo 等同于 new foo(), 只能用在不传递任何参数的情况。<br>3.如果构造函数返回了一个“对象”，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那么new出来的结果为步骤1创建的对象，ps：一般情况下构造函数不返回任何值，不过用户如果想覆盖这个返回值，可以自己选择返回一个普通对象来覆盖。当然，返回数组也会覆盖，因为数组也是对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.a = a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</div><div class="line"></div><div class="line"> <span class="built_in">console</span>.log(bar.a); <span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>tips:new 和apply和call不能连用<br>也就是说 new foo.call(obj)这样是不行的。</p>
<p>文章学习来源主要来自于<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a>感兴趣的可以去溜溜。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.zaixian-fanyi.com/images/thisthat.jpg&quot; alt=&quot;enter image description here&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Playmakers———Daniel Nyari</title>
    <link href="http://yoursite.com/2016/11/10/Playmakers%E2%80%94%E2%80%94%E2%80%94Daniel-Nyari/"/>
    <id>http://yoursite.com/2016/11/10/Playmakers———Daniel-Nyari/</id>
    <published>2016-11-10T08:36:50.000Z</published>
    <updated>2017-01-28T03:34:44.146Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Playmakers"><a href="#Playmakers" class="headerlink" title="Playmakers"></a>Playmakers</h4><p><img src="http://up.weimeixi.com/uploads/allimg/130312/1326302N1-5.jpg" alt="alt text"></p>
<blockquote>
<p>Daniel Nyari，罗马尼亚插画师，出生于1985年，现居美国。《Playmakers》描绘的是世上著名的足球运动员。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Playmakers&quot;&gt;&lt;a href=&quot;#Playmakers&quot; class=&quot;headerlink&quot; title=&quot;Playmakers&quot;&gt;&lt;/a&gt;Playmakers&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://up.weimeixi.com/uploa
    
    </summary>
    
    
      <category term="足球 艺术" scheme="http://yoursite.com/tags/%E8%B6%B3%E7%90%83-%E8%89%BA%E6%9C%AF/"/>
    
  </entry>
  
</feed>
